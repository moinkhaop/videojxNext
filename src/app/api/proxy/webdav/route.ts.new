import { NextRequest, NextResponse } from 'next/server'
import { WebDAVUploadResponse } from '@/types'

export async function POST(request: NextRequest) {
  try {
    const { videoUrl, webdavConfig, fileName, folderPath = '' } = await request.json()

    if (!videoUrl || !webdavConfig || !fileName) {
      return NextResponse.json({
        success: false,
        error: '缺少必要参数'
      }, { status: 400 })
    }

    console.log(`[WebDAV] 开始上传文件: ${fileName}`)
    console.log(`[WebDAV] 服务器: ${webdavConfig.url}`)

    // 首先下载视频文件
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30秒超时
    
    try {
      const videoResponse = await fetch(videoUrl, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
        signal: controller.signal
      })
      
      clearTimeout(timeoutId);

      if (!videoResponse.ok) {
        return NextResponse.json({
          success: false,
          error: `下载视频失败: ${videoResponse.status}`
        }, { status: videoResponse.status })
      }

      const videoBuffer = await videoResponse.arrayBuffer()
      console.log(`[WebDAV] 视频文件大小: ${videoBuffer.byteLength} bytes`)

      // 构建WebDAV上传路径
      const uploadPath = folderPath 
        ? `${webdavConfig.url.replace(/\/$/, '')}/${folderPath}/${fileName}`
        : `${webdavConfig.url.replace(/\/$/, '')}/${fileName}`

      // 构建认证头
      const auth = btoa(`${webdavConfig.username}:${webdavConfig.password}`)
      const headers = {
        'Authorization': `Basic ${auth}`,
        'Content-Type': 'application/octet-stream',
        'Content-Length': videoBuffer.byteLength.toString()
      }

      // 上传到WebDAV服务器
      const uploadResponse = await fetch(uploadPath, {
        method: 'PUT',
        headers,
        body: videoBuffer
      })

      if (!uploadResponse.ok) {
        console.error(`[WebDAV] 上传失败: ${uploadResponse.status} ${uploadResponse.statusText}`)
        
        // 尝试获取错误详情
        let errorMessage = `上传失败: ${uploadResponse.status}`
        try {
          const errorText = await uploadResponse.text()
          if (errorText) {
            errorMessage += ` - ${errorText}`
          }
        } catch (e) {
          // 忽略错误详情获取失败
        }

        return NextResponse.json({
          success: false,
          error: errorMessage
        }, { status: uploadResponse.status })
      }

      console.log(`[WebDAV] 上传成功: ${uploadPath}`)

      const result: WebDAVUploadResponse = {
        success: true,
        filePath: uploadPath
      }

      return NextResponse.json(result)
    } catch (downloadError) {
      console.error('[WebDAV] 视频下载或上传错误:', downloadError)
      return NextResponse.json({
        success: false,
        error: downloadError instanceof Error ? downloadError.message : '下载或上传视频文件时发生错误'
      }, { status: 500 })
    }

  } catch (error) {
    console.error('[WebDAV] 上传错误:', error)
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '上传过程中发生未知错误'
    }, { status: 500 })
  }
}

// 测试WebDAV连接
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const serverUrl = searchParams.get('serverUrl')
    const username = searchParams.get('username')
    const password = searchParams.get('password')

    if (!serverUrl || !username || !password) {
      return NextResponse.json({
        success: false,
        error: '缺少WebDAV连接参数'
      }, { status: 400 })
    }

    // 解码可能被编码的参数
    const decodedUrl = decodeURIComponent(serverUrl)
    const decodedUsername = decodeURIComponent(username)
    const decodedPassword = decodeURIComponent(password)

    console.log(`[WebDAV] 测试连接到: ${decodedUrl}`)
    
    // 测试WebDAV连接
    const auth = Buffer.from(`${decodedUsername}:${decodedPassword}`).toString('base64')
    const testResponse = await fetch(decodedUrl, {
      method: 'PROPFIND',
      headers: {
        'Authorization': `Basic ${auth}`,
        'Depth': '0',
        'Content-Type': 'application/xml'
      },
      body: `<?xml version="1.0" encoding="utf-8" ?>
        <D:propfind xmlns:D="DAV:">
          <D:prop>
            <D:resourcetype/>
          </D:prop>
        </D:propfind>`
    })

    if (testResponse.ok || testResponse.status === 207) {
      return NextResponse.json({
        success: true,
        message: 'WebDAV连接测试成功'
      })
    } else {
      return NextResponse.json({
        success: false,
        error: `WebDAV连接失败: ${testResponse.status}`
      }, { status: testResponse.status })
    }

  } catch (error) {
    console.error('[WebDAV] 连接测试错误:', error)
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'WebDAV连接测试失败'
    }, { status: 500 })
  }
}
