"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/convert/page",{

/***/ "(app-pages-browser)/./src/lib/conversion.ts":
/*!*******************************!*\
  !*** ./src/lib/conversion.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConversionService: () => (/* binding */ ConversionService)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types */ \"(app-pages-browser)/./src/types/index.ts\");\n/* harmony import */ var _cleanup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cleanup */ \"(app-pages-browser)/./src/lib/cleanup.ts\");\n\n\nclass ConversionService {\n    // 解析视频链接\n    static async parseVideo(videoUrl, parserConfig) {\n        // 首先验证输入参数\n        if (!videoUrl || typeof videoUrl !== 'string' || !videoUrl.trim()) {\n            throw new Error('视频URL为空');\n        }\n        if (!parserConfig || !parserConfig.apiUrl) {\n            throw new Error('解析API配置无效');\n        }\n        try {\n            // 处理分享文本，提取真实URL\n            const extractedUrl = this.extractRealUrl(videoUrl);\n            console.log(\"[转存] 提取到URL: \".concat(extractedUrl));\n            console.log(\"[转存] 发送解析请求，URL: \".concat(extractedUrl.substring(0, 50), \"...\"));\n            const response = await fetch('/api/proxy/parser', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    videoUrl: extractedUrl,\n                    parserConfig\n                })\n            });\n            // {{ AURA: Modify - 添加解析API的JSON错误处理 }}\n            let result;\n            try {\n                const responseText = await response.text();\n                console.log(\"[转存] 解析API响应状态: \".concat(response.status, \", 内容长度: \").concat(responseText.length));\n                if (!responseText.trim()) {\n                    throw new Error(\"解析服务器返回空响应 (HTTP \".concat(response.status, \")\"));\n                }\n                result = JSON.parse(responseText);\n            } catch (parseError) {\n                console.error('[转存] 解析API JSON解析失败:', parseError);\n                console.error('[转存] 解析API响应状态:', response.status, response.statusText);\n                // 尝试获取部分响应内容用于调试\n                const responseText = await response.text().catch(()=>'无法获取响应文本');\n                const truncatedText = responseText.substring(0, 500);\n                throw new Error(\"解析API JSON解析失败 (HTTP \".concat(response.status, \"): \").concat(parseError instanceof Error ? parseError.message : '未知解析错误', \". 响应片段: \").concat(truncatedText));\n            }\n            if (!result.success) {\n                throw new Error(result.error || '视频解析失败');\n            }\n            // 验证返回的数据\n            if (!result.data) {\n                throw new Error('API返回的数据为空');\n            }\n            // {{ AURA: Modify - 移除测试API调用，直接验证数据完整性 }}\n            // 对于视频类型，检查URL字段\n            if (result.data.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.VIDEO && !result.data.url) {\n                throw new Error('视频解析成功但未返回有效的视频URL');\n            }\n            // 对于视频类型，确保URL字段是有效的网址\n            if (result.data.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.VIDEO && result.data.url) {\n                try {\n                    new URL(result.data.url);\n                } catch (e) {\n                    throw new Error(\"返回的URL无效: \".concat(result.data.url));\n                }\n            }\n            // 对于图集类型，检查图片数组\n            if (result.data.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.IMAGE_ALBUM) {\n                if (!result.data.images || result.data.images.length === 0) {\n                    throw new Error('图集解析成功但没有找到任何图片');\n                }\n                console.log(\"[转存] 图集解析成功，包含 \".concat(result.data.images.length, \" 张图片\"));\n            }\n            console.log(\"[转存] 解析成功，获取到\".concat(result.data.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.VIDEO ? '视频' : '图集', \": \").concat(result.data.title));\n            // {{ AURA: Modify - 修复图集解析时url.substring错误，添加类型判断 }}\n            if (result.data.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.VIDEO && result.data.url && typeof result.data.url === 'string') {\n                console.log(\"[转存] 视频URL: \".concat(result.data.url.substring(0, 50), \"...\"));\n            } else if (result.data.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.IMAGE_ALBUM && result.data.images) {\n                console.log(\"[转存] 图集包含 \".concat(result.data.images.length, \" 张图片\"));\n            }\n            return result.data;\n        } catch (error) {\n            console.error('[转存] 视频解析错误:', error);\n            throw error;\n        }\n    }\n    // 上传媒体到WebDAV\n    static async uploadToWebDAV(mediaInfo, webdavConfig, folderPath) {\n        const maxRetries = 5; // 增加最大重试次数到5次\n        let attempt = 0;\n        let lastError;\n        // 根据媒体类型生成文件名\n        let fileName = '';\n        if (mediaInfo.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.VIDEO && mediaInfo.url) {\n            // 视频文件名\n            const format = this.inferVideoFormat(mediaInfo.format, mediaInfo.url);\n            fileName = this.generateFileName(mediaInfo.title, format);\n        } else if (mediaInfo.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.IMAGE_ALBUM && mediaInfo.images && mediaInfo.images.length > 0) {\n            // 图集文件夹名 - 使用解析后的标题名称\n            fileName = this.generateFolderName(mediaInfo.title);\n        }\n        while(attempt < maxRetries){\n            try {\n                attempt++;\n                console.log(\"[转存] WebDAV上传尝试 \".concat(attempt, \"/\").concat(maxRetries, \": \").concat(mediaInfo.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.VIDEO ? '视频' : '图集'));\n                const response = await fetch('/api/proxy/webdav', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        videoUrl: mediaInfo.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.VIDEO ? mediaInfo.url : undefined,\n                        images: mediaInfo.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.IMAGE_ALBUM ? mediaInfo.images : undefined,\n                        webdavConfig,\n                        fileName,\n                        folderPath: folderPath || ''\n                    })\n                });\n                // {{ AURA: Modify - 添加更强的JSON解析错误处理 }}\n                let result;\n                try {\n                    const responseText = await response.text();\n                    console.log(\"[转存] 原始响应状态: \".concat(response.status, \", 内容长度: \").concat(responseText.length));\n                    if (!responseText.trim()) {\n                        throw new Error(\"服务器返回空响应 (HTTP \".concat(response.status, \")\"));\n                    }\n                    result = JSON.parse(responseText);\n                } catch (parseError) {\n                    console.error('[转存] JSON解析失败:', parseError);\n                    console.error('[转存] 响应状态:', response.status, response.statusText);\n                    // 尝试获取部分响应内容用于调试\n                    const responseText = await response.text().catch(()=>'无法获取响应文本');\n                    const truncatedText = responseText.substring(0, 500);\n                    throw new Error(\"JSON解析失败 (HTTP \".concat(response.status, \"): \").concat(parseError instanceof Error ? parseError.message : '未知解析错误', \". 响应片段: \").concat(truncatedText));\n                }\n                if (!result.success) {\n                    var _result_error, _result_error1, _result_error2;\n                    // 对于403/401错误，在第一次尝试时进行重试\n                    const shouldRetryImmediately = (((_result_error = result.error) === null || _result_error === void 0 ? void 0 : _result_error.includes('403')) || ((_result_error1 = result.error) === null || _result_error1 === void 0 ? void 0 : _result_error1.includes('401'))) && attempt === 1;\n                    if (shouldRetryImmediately) {\n                        console.log('[转存] 权限错误，立即进行重试');\n                        // 等待一小段时间后立即重试\n                        await new Promise((resolve)=>setTimeout(resolve, 1000));\n                        continue;\n                    }\n                    // 对于404错误，提供更具体的错误信息\n                    let errorMessage = result.error || '媒体上传失败';\n                    if ((_result_error2 = result.error) === null || _result_error2 === void 0 ? void 0 : _result_error2.includes('404')) {\n                        errorMessage = \"上传路径不存在 (404)。请检查WebDAV服务器地址和路径配置是否正确。错误详情: \".concat(result.error);\n                    }\n                    throw new Error(errorMessage);\n                }\n                console.log(\"[转存] 上传成功，尝试次数: \".concat(attempt));\n                return result.filePath;\n            } catch (error) {\n                lastError = error;\n                console.error(\"[转存] 上传尝试 \".concat(attempt, \" 失败:\"), error);\n                // 检查是否需要重试\n                const shouldRetry = this.shouldRetryUpload(error, attempt);\n                if (attempt < maxRetries && shouldRetry) {\n                    // 使用指数退避策略\n                    const waitTime = Math.min(1000 * Math.pow(2, attempt - 1), 10000); // 最大等待10秒\n                    console.log(\"[转存] 等待 \".concat(waitTime / 1000, \" 秒后重试...\"));\n                    await new Promise((resolve)=>setTimeout(resolve, waitTime));\n                } else {\n                    break; // 不再重试\n                }\n            }\n        }\n        // 所有尝试都失败\n        console.error('[转存] 所有上传尝试均失败');\n        throw lastError || new Error('视频上传失败，已达到最大重试次数');\n    }\n    // 单个视频转存\n    static async convertSingle(task, parserConfig, webdavConfig, onProgress) {\n        try {\n            // 更新状态为解析中\n            task.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.PARSING;\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(20, _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.PARSING);\n            console.log(\"[转存] 开始解析视频: \".concat(task.videoUrl));\n            console.log(\"[转存] 使用解析器: \".concat(parserConfig.name, \" (\").concat(parserConfig.apiUrl, \")\"));\n            // 解析视频\n            try {\n                // 添加视频URL格式检查\n                if (!this.isValidUrl(task.videoUrl)) {\n                    throw new Error('视频链接格式无效，请确保以http://或https://开头');\n                }\n                // {{ AURA: Modify - 移除备用测试模式，直接使用主解析结果 }}\n                let parsedInfo;\n                try {\n                    parsedInfo = await this.parseVideo(task.videoUrl, parserConfig);\n                    console.log(\"[转存] 解析成功，媒体类型: \".concat(parsedInfo.mediaType));\n                } catch (parseError) {\n                    console.error('[转存] 解析失败:', parseError);\n                    throw parseError;\n                }\n                task.parsedVideoInfo = parsedInfo;\n                task.videoTitle = parsedInfo.title;\n                console.log(\"[转存] 解析完成: \".concat(parsedInfo.title));\n            } catch (error) {\n                console.error('[转存] 视频解析失败:', error);\n                task.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.FAILED;\n                let errorMsg = error instanceof Error ? error.message : '视频解析失败';\n                // 添加更友好的错误信息\n                if (errorMsg.includes('URL为空')) {\n                    errorMsg = 'URL为空 - 解析API无法提取视频URL，请尝试其他解析API或检查链接';\n                }\n                task.error = errorMsg;\n                task.completedAt = new Date();\n                return task;\n            }\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(50, _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.PARSING);\n            // 更新状态为上传中\n            task.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.UPLOADING;\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(60, _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.UPLOADING);\n            // 上传媒体\n            const filePath = await this.uploadToWebDAV(task.parsedVideoInfo, webdavConfig);\n            // 更新任务状态\n            task.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.SUCCESS;\n            task.completedAt = new Date();\n            task.uploadResult = {\n                success: true,\n                filePath\n            };\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(100, _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.SUCCESS);\n            // 任务完成后执行清理\n            await _cleanup__WEBPACK_IMPORTED_MODULE_1__.CleanupService.cleanupAfterTaskCompletion(task);\n            return task;\n        } catch (error) {\n            // 更新任务为失败状态\n            task.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.FAILED;\n            task.completedAt = new Date();\n            task.error = error instanceof Error ? error.message : '转存过程中发生未知错误';\n            task.uploadResult = {\n                success: false,\n                error: task.error\n            };\n            // 任务完成后执行清理\n            await _cleanup__WEBPACK_IMPORTED_MODULE_1__.CleanupService.cleanupAfterTaskCompletion(task);\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(0, _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.FAILED);\n            return task;\n        }\n    }\n    // 批量转存\n    static async convertBatch(batchTask, onProgress) {\n        batchTask.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.PARSING;\n        const totalTasks = batchTask.tasks.length;\n        let completedTasks = 0;\n        for(let i = 0; i < batchTask.tasks.length; i++){\n            const task = batchTask.tasks[i];\n            try {\n                // 处理单个任务\n                const updatedTask = await this.convertSingle(task, batchTask.parserConfig, batchTask.webdavConfig, (progress, status)=>{\n                    // 计算总体进度\n                    const taskProgress = (completedTasks + progress / 100) / totalTasks * 100;\n                    onProgress === null || onProgress === void 0 ? void 0 : onProgress(taskProgress, task);\n                });\n                batchTask.tasks[i] = updatedTask;\n                if (updatedTask.status === _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.SUCCESS) {\n                    completedTasks++;\n                }\n            } catch (error) {\n                console.error(\"批量任务中的单个任务失败:\", error);\n            // 继续处理下一个任务\n            }\n            // 更新批量任务状态\n            batchTask.completedTasks = completedTasks;\n            // 计算总体进度\n            const overallProgress = (i + 1) / totalTasks * 100;\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(overallProgress, task);\n            // 添加延迟避免请求过于频繁\n            if (i < batchTask.tasks.length - 1) {\n                await new Promise((resolve)=>setTimeout(resolve, 1000));\n            }\n        }\n        // 更新批量任务最终状态\n        batchTask.completedAt = new Date();\n        if (completedTasks === totalTasks) {\n            batchTask.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.SUCCESS;\n            // 批量任务完成后执行清理\n            await _cleanup__WEBPACK_IMPORTED_MODULE_1__.CleanupService.cleanupAfterTaskCompletion(batchTask);\n        } else if (completedTasks === 0) {\n            batchTask.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.FAILED;\n        } else {\n            batchTask.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.SUCCESS; // 部分成功也标记为成功\n        }\n        return batchTask;\n    }\n    // 生成文件名\n    static generateFileName(title, format) {\n        // 清理文件名中的非法字符\n        const cleanTitle = title.replace(/[<>:\"/\\\\|?*\\x00-\\x1F]/g, '_') // 移除非法字符和控制字符\n        .replace(/\\s+/g, '_') // 将空格替换为下划线\n        .replace(/_+/g, '_') // 将多个下划线合并为一个\n        .replace(/^_|_$/g, '') // 移除开头和结尾的下划线\n        .substring(0, 100) // 限制长度\n        .trim() // 去除首尾空格\n        ;\n        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n        return \"\".concat(cleanTitle, \"_\").concat(timestamp, \".\").concat(format);\n    }\n    // 生成文件夹名（用于图集）\n    static generateFolderName(title) {\n        // 清理文件夹名中的非法字符\n        const cleanTitle = title.replace(/[<>:\"/\\\\|?*\\x00-\\x1F]/g, '_') // 移除非法字符和控制字符\n        .replace(/\\s+/g, '_') // 将空格替换为下划线\n        .replace(/_+/g, '_') // 将多个下划线合并为一个\n        .replace(/^_|_$/g, '') // 移除开头和结尾的下划线\n        .substring(0, 100) // 限制长度\n        .trim() // 去除首尾空格\n        ;\n        return cleanTitle;\n    }\n    // 测试WebDAV连接\n    static async testWebDAVConnection(webdavConfig) {\n        try {\n            // 确保URL编码正确，避免特殊字符问题\n            const params = new URLSearchParams({\n                serverUrl: encodeURIComponent(webdavConfig.url),\n                username: encodeURIComponent(webdavConfig.username),\n                password: encodeURIComponent(webdavConfig.password)\n            });\n            console.log(\"[WebDAV] 测试连接: \".concat(webdavConfig.url));\n            const response = await fetch(\"/api/proxy/webdav?\".concat(params.toString()));\n            const result = await response.json();\n            return {\n                success: result.success,\n                message: result.success ? '连接测试成功' : result.error || '连接测试失败'\n            };\n        } catch (error) {\n            console.error('[WebDAV] 连接测试错误:', error);\n            return {\n                success: false,\n                message: error instanceof Error ? error.message : '连接测试失败'\n            };\n        }\n    }\n    // 生成任务ID\n    static generateTaskId() {\n        return \"task_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9));\n    }\n    // 生成批量任务ID\n    static generateBatchId() {\n        return \"batch_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9));\n    }\n    // 解析视频链接列表\n    static parseVideoUrls(text) {\n        const lines = text.split('\\n');\n        const urls = [];\n        for (const line of lines){\n            const trimmed = line.trim();\n            if (trimmed) {\n                // 尝试从包含其他文字的输入中提取URL\n                const extractedUrl = this.extractRealUrl(trimmed);\n                if (extractedUrl && this.isValidUrl(extractedUrl)) {\n                    urls.push(extractedUrl);\n                }\n            }\n        }\n        return urls;\n    }\n    // 验证URL格式\n    static isValidUrl(url) {\n        try {\n            // 首先提取抖音等平台的真实链接\n            const extractedUrl = this.extractRealUrl(url);\n            new URL(extractedUrl);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n    // 处理短视频分享文本，提取真实URL\n    static extractRealUrl(input) {\n        // 如果已经是有效URL，直接返回\n        try {\n            new URL(input);\n            return input;\n        } catch (e) {\n        // 不是有效URL，尝试提取\n        }\n        // 处理抖音分享文本格式\n        // 例如: \"7.97 DUL:/ 02/05 z@T.yg 不知道啊被季莹莹抽了之后就这样了# 永劫无间手游 # 季莹莹 # 胡桃 # cos # 猎奇  https://v.douyin.com/d689EsOAlug/ 复制此链接，打开Dou音搜索，直接观看视频！\"\n        // 改进的URL正则表达式，能够更好地匹配各种分享文本中的URL\n        const urlRegex = /(https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&=\\/=]*))/g;\n        const matches = input.match(urlRegex);\n        if (matches && matches.length > 0) {\n            // 返回第一个匹配的URL并移除末尾斜杠\n            return matches[0].replace(/\\/$/, '');\n        }\n        return input;\n    }\n    // 估算文件大小（基于时长）\n    static estimateFileSize(duration) {\n        if (!duration) return 0;\n        // 假设平均码率为 1Mbps\n        return duration * 1024 * 1024 / 8;\n    }\n    // 格式化文件大小\n    static formatFileSize(bytes) {\n        if (bytes === 0) return '0 B';\n        const k = 1024;\n        const sizes = [\n            'B',\n            'KB',\n            'MB',\n            'GB',\n            'TB'\n        ];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n    // 格式化时长\n    static formatDuration(seconds) {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor(seconds % 3600 / 60);\n        const secs = Math.floor(seconds % 60);\n        if (hours > 0) {\n            return \"\".concat(hours, \":\").concat(minutes.toString().padStart(2, '0'), \":\").concat(secs.toString().padStart(2, '0'));\n        } else {\n            return \"\".concat(minutes, \":\").concat(secs.toString().padStart(2, '0'));\n        }\n    }\n    // {{ AURA: Add - 智能视频格式推断方法 }}\n    static inferVideoFormat(providedFormat, videoUrl) {\n        // 支持的视频格式列表\n        const validFormats = [\n            'mp4',\n            'avi',\n            'mov',\n            'wmv',\n            'flv',\n            'webm',\n            'mkv',\n            'm4v',\n            '3gp',\n            'f4v',\n            'asf',\n            'rm',\n            'rmvb',\n            'vob',\n            'ogv',\n            'm2ts',\n            'mts'\n        ];\n        // 验证提供的格式\n        if (providedFormat && validFormats.includes(providedFormat.toLowerCase())) {\n            return providedFormat.toLowerCase();\n        }\n        // 从URL推断\n        if (videoUrl) {\n            const urlFormat = this.extractFormatFromUrl(videoUrl);\n            if (urlFormat && validFormats.includes(urlFormat.toLowerCase())) {\n                return urlFormat.toLowerCase();\n            }\n        }\n        // 默认mp4\n        return 'mp4';\n    }\n    // {{ AURA: Add - 从URL提取格式扩展名 }}\n    static extractFormatFromUrl(url) {\n        try {\n            const urlObj = new URL(url);\n            const pathname = urlObj.pathname;\n            const lastDotIndex = pathname.lastIndexOf('.');\n            if (lastDotIndex !== -1) {\n                const extension = pathname.substring(lastDotIndex + 1);\n                return extension.toLowerCase();\n            }\n        } catch (e) {\n        // URL解析失败，忽略错误\n        }\n        return null;\n    }\n    // {{ AURA: Add - 验证视频格式是否有效 }}\n    static isValidVideoFormat(format) {\n        const validFormats = [\n            'mp4',\n            'avi',\n            'mov',\n            'wmv',\n            'flv',\n            'webm',\n            'mkv',\n            'm4v',\n            '3gp',\n            'f4v',\n            'asf',\n            'rm',\n            'rmvb',\n            'vob',\n            'ogv',\n            'm2ts',\n            'mts'\n        ];\n        return validFormats.includes(format.toLowerCase());\n    }\n    // {{ AURA: Add - 判断是否应该重试上传 }}\n    static shouldRetryUpload(error, attempt) {\n        // 如果是最后一次尝试，不重试\n        if (attempt >= 5) {\n            return false;\n        }\n        // 检查错误类型\n        if (error) {\n            const errorMessage = (error.message || error.toString()).toLowerCase();\n            // 对于网络错误始终重试\n            if (errorMessage.includes('network error') || errorMessage.includes('fetch failed') || errorMessage.includes('econnreset') || errorMessage.includes('timeout')) {\n                return true;\n            }\n            // 对于服务器错误(5xx)始终重试\n            if (errorMessage.includes('500') || errorMessage.includes('502') || errorMessage.includes('503') || errorMessage.includes('504')) {\n                return true;\n            }\n            // 对于权限错误(403/401)仅在第一次尝试时重试\n            if ((errorMessage.includes('403') || errorMessage.includes('401')) && attempt === 1) {\n                return true;\n            }\n        }\n        // 默认情况下，对于前几次尝试允许重试\n        return attempt < 3;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/conversion.ts\n"));

/***/ })

});