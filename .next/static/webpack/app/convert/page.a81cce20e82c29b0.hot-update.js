"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/convert/page",{

/***/ "(app-pages-browser)/./src/lib/conversion.ts":
/*!*******************************!*\
  !*** ./src/lib/conversion.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConversionService: () => (/* binding */ ConversionService)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types */ \"(app-pages-browser)/./src/types/index.ts\");\n/* harmony import */ var _cleanup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cleanup */ \"(app-pages-browser)/./src/lib/cleanup.ts\");\n/* harmony import */ var _filename_sanitizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./filename-sanitizer */ \"(app-pages-browser)/./src/lib/filename-sanitizer.ts\");\n\n\n\nclass ConversionService {\n    // 解析视频链接\n    static async parseVideo(videoUrl, parserConfig) {\n        // 首先验证输入参数\n        if (!videoUrl || typeof videoUrl !== 'string' || !videoUrl.trim()) {\n            throw new Error('视频URL为空');\n        }\n        if (!parserConfig || !parserConfig.apiUrl) {\n            throw new Error('解析API配置无效');\n        }\n        try {\n            // 处理分享文本，提取真实URL\n            const extractedUrl = this.extractRealUrl(videoUrl);\n            console.log(\"[转存] 提取到URL: \".concat(extractedUrl));\n            console.log(\"[转存] 发送解析请求，URL: \".concat(extractedUrl.substring(0, 50), \"...\"));\n            const response = await fetch('/api/proxy/parser', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    videoUrl: extractedUrl,\n                    parserConfig\n                })\n            });\n            // {{ AURA: Modify - 添加解析API的JSON错误处理 }}\n            let result;\n            try {\n                const responseText = await response.text();\n                console.log(\"[转存] 解析API响应状态: \".concat(response.status, \", 内容长度: \").concat(responseText.length));\n                if (!responseText.trim()) {\n                    throw new Error(\"解析服务器返回空响应 (HTTP \".concat(response.status, \")\"));\n                }\n                result = JSON.parse(responseText);\n            } catch (parseError) {\n                console.error('[转存] 解析API JSON解析失败:', parseError);\n                console.error('[转存] 解析API响应状态:', response.status, response.statusText);\n                // 尝试获取部分响应内容用于调试\n                const responseText = await response.text().catch(()=>'无法获取响应文本');\n                const truncatedText = responseText.substring(0, 500);\n                throw new Error(\"解析API JSON解析失败 (HTTP \".concat(response.status, \"): \").concat(parseError instanceof Error ? parseError.message : '未知解析错误', \". 响应片段: \").concat(truncatedText));\n            }\n            if (!result.success) {\n                throw new Error(result.error || '视频解析失败');\n            }\n            // 验证返回的数据\n            if (!result.data) {\n                throw new Error('API返回的数据为空');\n            }\n            // {{ AURA: Modify - 移除测试API调用，直接验证数据完整性 }}\n            // 对于视频类型，检查URL字段\n            if (result.data.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.VIDEO && !result.data.url) {\n                throw new Error('视频解析成功但未返回有效的视频URL');\n            }\n            // 对于视频类型，确保URL字段是有效的网址\n            if (result.data.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.VIDEO && result.data.url) {\n                try {\n                    new URL(result.data.url);\n                } catch (e) {\n                    throw new Error(\"返回的URL无效: \".concat(result.data.url));\n                }\n            }\n            // 对于图集类型，检查图片数组\n            if (result.data.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.IMAGE_ALBUM) {\n                if (!result.data.images || result.data.images.length === 0) {\n                    throw new Error('图集解析成功但没有找到任何图片');\n                }\n                console.log(\"[转存] 图集解析成功，包含 \".concat(result.data.images.length, \" 张图片\"));\n            }\n            console.log(\"[转存] 解析成功，获取到\".concat(result.data.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.VIDEO ? '视频' : '图集', \": \").concat(result.data.title));\n            // {{ AURA: Modify - 修复图集解析时url.substring错误，添加类型判断 }}\n            if (result.data.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.VIDEO && result.data.url && typeof result.data.url === 'string') {\n                console.log(\"[转存] 视频URL: \".concat(result.data.url.substring(0, 50), \"...\"));\n            } else if (result.data.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.IMAGE_ALBUM && result.data.images) {\n                console.log(\"[转存] 图集包含 \".concat(result.data.images.length, \" 张图片\"));\n            }\n            return result.data;\n        } catch (error) {\n            console.error('[转存] 视频解析错误:', error);\n            throw error;\n        }\n    }\n    // 上传媒体到WebDAV\n    static async uploadToWebDAV(mediaInfo, webdavConfig, folderPath) {\n        const maxRetries = 5; // 增加最大重试次数到5次\n        let attempt = 0;\n        let lastError;\n        // 根据媒体类型生成文件名\n        let fileName = '';\n        if (mediaInfo.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.VIDEO && mediaInfo.url) {\n            // 视频文件名\n            const format = this.inferVideoFormat(mediaInfo.format, mediaInfo.url);\n            fileName = this.generateFileName(mediaInfo.title, format);\n        } else if (mediaInfo.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.IMAGE_ALBUM && mediaInfo.images && mediaInfo.images.length > 0) {\n            // 图集文件夹名 - 使用解析后的标题名称\n            fileName = this.generateFolderName(mediaInfo.title);\n        }\n        while(attempt < maxRetries){\n            try {\n                attempt++;\n                console.log(\"[转存] WebDAV上传尝试 \".concat(attempt, \"/\").concat(maxRetries, \": \").concat(mediaInfo.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.VIDEO ? '视频' : '图集'));\n                const response = await fetch('/api/proxy/webdav', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        videoUrl: mediaInfo.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.VIDEO ? mediaInfo.url : undefined,\n                        images: mediaInfo.mediaType === _types__WEBPACK_IMPORTED_MODULE_0__.MediaType.IMAGE_ALBUM ? mediaInfo.images : undefined,\n                        webdavConfig,\n                        fileName,\n                        folderPath: folderPath || ''\n                    })\n                });\n                // {{ AURA: Modify - 添加更强的JSON解析错误处理 }}\n                let result;\n                try {\n                    const responseText = await response.text();\n                    console.log(\"[转存] 原始响应状态: \".concat(response.status, \", 内容长度: \").concat(responseText.length));\n                    if (!responseText.trim()) {\n                        throw new Error(\"服务器返回空响应 (HTTP \".concat(response.status, \")\"));\n                    }\n                    result = JSON.parse(responseText);\n                } catch (parseError) {\n                    console.error('[转存] JSON解析失败:', parseError);\n                    console.error('[转存] 响应状态:', response.status, response.statusText);\n                    // 尝试获取部分响应内容用于调试\n                    const responseText = await response.text().catch(()=>'无法获取响应文本');\n                    const truncatedText = responseText.substring(0, 500);\n                    throw new Error(\"JSON解析失败 (HTTP \".concat(response.status, \"): \").concat(parseError instanceof Error ? parseError.message : '未知解析错误', \". 响应片段: \").concat(truncatedText));\n                }\n                if (!result.success) {\n                    var _result_error, _result_error1, _result_error2;\n                    // 对于403/401错误，在第一次尝试时进行重试\n                    const shouldRetryImmediately = (((_result_error = result.error) === null || _result_error === void 0 ? void 0 : _result_error.includes('403')) || ((_result_error1 = result.error) === null || _result_error1 === void 0 ? void 0 : _result_error1.includes('401'))) && attempt === 1;\n                    if (shouldRetryImmediately) {\n                        console.log('[转存] 权限错误，立即进行重试');\n                        // 等待一小段时间后立即重试\n                        await new Promise((resolve)=>setTimeout(resolve, 1000));\n                        continue;\n                    }\n                    // 对于404错误，提供更具体的错误信息\n                    let errorMessage = result.error || '媒体上传失败';\n                    if ((_result_error2 = result.error) === null || _result_error2 === void 0 ? void 0 : _result_error2.includes('404')) {\n                        errorMessage = \"上传路径不存在 (404)。请检查WebDAV服务器地址和路径配置是否正确。错误详情: \".concat(result.error);\n                    }\n                    throw new Error(errorMessage);\n                }\n                console.log(\"[转存] 上传成功，尝试次数: \".concat(attempt));\n                return result.filePath;\n            } catch (error) {\n                lastError = error;\n                console.error(\"[转存] 上传尝试 \".concat(attempt, \" 失败:\"), error);\n                // 检查是否需要重试\n                const shouldRetry = this.shouldRetryUpload(error, attempt);\n                if (attempt < maxRetries && shouldRetry) {\n                    // 使用指数退避策略\n                    const waitTime = Math.min(1000 * Math.pow(2, attempt - 1), 10000); // 最大等待10秒\n                    console.log(\"[转存] 等待 \".concat(waitTime / 1000, \" 秒后重试...\"));\n                    await new Promise((resolve)=>setTimeout(resolve, waitTime));\n                } else {\n                    break; // 不再重试\n                }\n            }\n        }\n        // 所有尝试都失败\n        console.error('[转存] 所有上传尝试均失败');\n        throw lastError || new Error('视频上传失败，已达到最大重试次数');\n    }\n    // 单个视频转存\n    static async convertSingle(task, parserConfig, webdavConfig, onProgress) {\n        try {\n            // 更新状态为解析中\n            task.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.PARSING;\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(20, _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.PARSING);\n            console.log(\"[转存] 开始解析视频: \".concat(task.videoUrl));\n            console.log(\"[转存] 使用解析器: \".concat(parserConfig.name, \" (\").concat(parserConfig.apiUrl, \")\"));\n            // 解析视频\n            try {\n                // 添加视频URL格式检查\n                if (!this.isValidUrl(task.videoUrl)) {\n                    throw new Error('视频链接格式无效，请确保以http://或https://开头');\n                }\n                // {{ AURA: Modify - 移除备用测试模式，直接使用主解析结果 }}\n                let parsedInfo;\n                try {\n                    parsedInfo = await this.parseVideo(task.videoUrl, parserConfig);\n                    console.log(\"[转存] 解析成功，媒体类型: \".concat(parsedInfo.mediaType));\n                } catch (parseError) {\n                    console.error('[转存] 解析失败:', parseError);\n                    throw parseError;\n                }\n                task.parsedVideoInfo = parsedInfo;\n                task.videoTitle = parsedInfo.title;\n                console.log(\"[转存] 解析完成: \".concat(parsedInfo.title));\n            } catch (error) {\n                console.error('[转存] 视频解析失败:', error);\n                task.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.FAILED;\n                let errorMsg = error instanceof Error ? error.message : '视频解析失败';\n                // 添加更友好的错误信息\n                if (errorMsg.includes('URL为空')) {\n                    errorMsg = 'URL为空 - 解析API无法提取视频URL，请尝试其他解析API或检查链接';\n                }\n                task.error = errorMsg;\n                task.completedAt = new Date();\n                return task;\n            }\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(50, _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.PARSING);\n            // 更新状态为上传中\n            task.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.UPLOADING;\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(60, _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.UPLOADING);\n            // 上传媒体\n            const filePath = await this.uploadToWebDAV(task.parsedVideoInfo, webdavConfig);\n            // 更新任务状态\n            task.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.SUCCESS;\n            task.completedAt = new Date();\n            task.uploadResult = {\n                success: true,\n                filePath\n            };\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(100, _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.SUCCESS);\n            // 任务完成后执行清理\n            await _cleanup__WEBPACK_IMPORTED_MODULE_1__.CleanupService.cleanupAfterTaskCompletion(task);\n            return task;\n        } catch (error) {\n            // 更新任务为失败状态\n            task.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.FAILED;\n            task.completedAt = new Date();\n            task.error = error instanceof Error ? error.message : '转存过程中发生未知错误';\n            task.uploadResult = {\n                success: false,\n                error: task.error\n            };\n            // 任务完成后执行清理\n            await _cleanup__WEBPACK_IMPORTED_MODULE_1__.CleanupService.cleanupAfterTaskCompletion(task);\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(0, _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.FAILED);\n            return task;\n        }\n    }\n    // 批量转存\n    static async convertBatch(batchTask, onProgress) {\n        batchTask.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.PARSING;\n        const totalTasks = batchTask.tasks.length;\n        let completedTasks = 0;\n        for(let i = 0; i < batchTask.tasks.length; i++){\n            const task = batchTask.tasks[i];\n            try {\n                // 处理单个任务\n                const updatedTask = await this.convertSingle(task, batchTask.parserConfig, batchTask.webdavConfig, (progress, status)=>{\n                    // 计算总体进度\n                    const taskProgress = (completedTasks + progress / 100) / totalTasks * 100;\n                    onProgress === null || onProgress === void 0 ? void 0 : onProgress(taskProgress, task);\n                });\n                batchTask.tasks[i] = updatedTask;\n                if (updatedTask.status === _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.SUCCESS) {\n                    completedTasks++;\n                }\n            } catch (error) {\n                console.error(\"批量任务中的单个任务失败:\", error);\n            // 继续处理下一个任务\n            }\n            // 更新批量任务状态\n            batchTask.completedTasks = completedTasks;\n            // 计算总体进度\n            const overallProgress = (i + 1) / totalTasks * 100;\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(overallProgress, task);\n            // 添加延迟避免请求过于频繁\n            if (i < batchTask.tasks.length - 1) {\n                await new Promise((resolve)=>setTimeout(resolve, 1000));\n            }\n        }\n        // 更新批量任务最终状态\n        batchTask.completedAt = new Date();\n        if (completedTasks === totalTasks) {\n            batchTask.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.SUCCESS;\n            // 批量任务完成后执行清理\n            await _cleanup__WEBPACK_IMPORTED_MODULE_1__.CleanupService.cleanupAfterTaskCompletion(batchTask);\n        } else if (completedTasks === 0) {\n            batchTask.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.FAILED;\n        } else {\n            batchTask.status = _types__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.SUCCESS; // 部分成功也标记为成功\n        }\n        return batchTask;\n    }\n    // 生成文件名\n    static generateFileName(title, format) {\n        // {{ AURA: Modify - 使用FilenameSanitizer进行文件名规范化 }}\n        const sanitizedTitle = _filename_sanitizer__WEBPACK_IMPORTED_MODULE_2__.FilenameSanitizer.sanitize(title, {\n            replacement: '_',\n            maxLength: 100,\n            preserveExtension: false,\n            addTimestamp: true\n        });\n        // 移除可能的扩展名，确保格式正确\n        const nameWithoutExt = sanitizedTitle.replace(/\\.[^.]*$/, '');\n        return \"\".concat(nameWithoutExt, \".\").concat(format);\n    }\n    // 生成文件夹名（用于图集）\n    static generateFolderName(title) {\n        // {{ AURA: Modify - 使用FilenameSanitizer进行文件夹名规范化 }}\n        return _filename_sanitizer__WEBPACK_IMPORTED_MODULE_2__.FilenameSanitizer.sanitize(title, {\n            replacement: '_',\n            maxLength: 100,\n            preserveExtension: false,\n            addTimestamp: false\n        });\n    }\n    // 测试WebDAV连接\n    static async testWebDAVConnection(webdavConfig) {\n        try {\n            // 确保URL编码正确，避免特殊字符问题\n            const params = new URLSearchParams({\n                serverUrl: encodeURIComponent(webdavConfig.url),\n                username: encodeURIComponent(webdavConfig.username),\n                password: encodeURIComponent(webdavConfig.password)\n            });\n            console.log(\"[WebDAV] 测试连接: \".concat(webdavConfig.url));\n            const response = await fetch(\"/api/proxy/webdav?\".concat(params.toString()));\n            const result = await response.json();\n            return {\n                success: result.success,\n                message: result.success ? '连接测试成功' : result.error || '连接测试失败'\n            };\n        } catch (error) {\n            console.error('[WebDAV] 连接测试错误:', error);\n            return {\n                success: false,\n                message: error instanceof Error ? error.message : '连接测试失败'\n            };\n        }\n    }\n    // {{ AURA: Add - 文件名规范化方法，用于处理用户上传的文件 }}\n    static sanitizeUploadFilename(filename) {\n        console.log(\"[文件名规范化] 原始文件名: \".concat(filename));\n        // 检测特殊符号\n        const specialChars = _filename_sanitizer__WEBPACK_IMPORTED_MODULE_2__.FilenameSanitizer.detectSpecialChars(filename);\n        if (specialChars.length > 0) {\n            console.log(\"[文件名规范化] 检测到特殊符号: \".concat(specialChars.join(', ')));\n        }\n        // 进行规范化处理\n        const sanitized = _filename_sanitizer__WEBPACK_IMPORTED_MODULE_2__.FilenameSanitizer.sanitize(filename, {\n            replacement: '_',\n            maxLength: 150,\n            preserveExtension: true,\n            addTimestamp: false\n        });\n        console.log(\"[文件名规范化] 规范化后文件名: \".concat(sanitized));\n        return sanitized;\n    }\n    // {{ AURA: Add - 批量文件名规范化方法 }}\n    static sanitizeUploadFilenames(filenames) {\n        console.log(\"[批量文件名规范化] 处理 \".concat(filenames.length, \" 个文件名\"));\n        const sanitized = _filename_sanitizer__WEBPACK_IMPORTED_MODULE_2__.FilenameSanitizer.sanitizeBatch(filenames, {\n            replacement: '_',\n            maxLength: 150,\n            preserveExtension: true,\n            addTimestamp: false\n        });\n        // 输出处理结果\n        for(let i = 0; i < filenames.length; i++){\n            if (filenames[i] !== sanitized[i]) {\n                console.log(\"[批量文件名规范化] \".concat(filenames[i], \" -> \").concat(sanitized[i]));\n            }\n        }\n        return sanitized;\n    }\n    // {{ AURA: Add - 验证文件名是否符合规范 }}\n    static validateFilename(filename) {\n        const validation = _filename_sanitizer__WEBPACK_IMPORTED_MODULE_2__.FilenameSanitizer.validate(filename);\n        const sanitized = this.sanitizeUploadFilename(filename);\n        return {\n            isValid: validation.isValid,\n            issues: validation.issues,\n            sanitized: sanitized\n        };\n    }\n    // 生成任务ID\n    static generateTaskId() {\n        return \"task_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9));\n    }\n    // 生成批量任务ID\n    static generateBatchId() {\n        return \"batch_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9));\n    }\n    // 解析视频链接列表\n    static parseVideoUrls(text) {\n        const lines = text.split('\\n');\n        const urls = [];\n        for (const line of lines){\n            const trimmed = line.trim();\n            if (trimmed) {\n                // 尝试从包含其他文字的输入中提取URL\n                const extractedUrl = this.extractRealUrl(trimmed);\n                if (extractedUrl && this.isValidUrl(extractedUrl)) {\n                    urls.push(extractedUrl);\n                }\n            }\n        }\n        return urls;\n    }\n    // 验证URL格式\n    static isValidUrl(url) {\n        try {\n            // 首先提取抖音等平台的真实链接\n            const extractedUrl = this.extractRealUrl(url);\n            new URL(extractedUrl);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n    // 处理短视频分享文本，提取真实URL\n    static extractRealUrl(input) {\n        // 如果已经是有效URL，直接返回\n        try {\n            new URL(input);\n            return input;\n        } catch (e) {\n        // 不是有效URL，尝试提取\n        }\n        // 处理抖音分享文本格式\n        // 例如: \"7.97 DUL:/ 02/05 z@T.yg 不知道啊被季莹莹抽了之后就这样了# 永劫无间手游 # 季莹莹 # 胡桃 # cos # 猎奇  https://v.douyin.com/d689EsOAlug/ 复制此链接，打开Dou音搜索，直接观看视频！\"\n        // 改进的URL正则表达式，能够更好地匹配各种分享文本中的URL\n        const urlRegex = /(https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\+.~#?&=\\/=]*))/g;\n        const matches = input.match(urlRegex);\n        if (matches && matches.length > 0) {\n            // 返回第一个匹配的URL并移除末尾斜杠\n            return matches[0].replace(/\\/$/, '');\n        }\n        return input;\n    }\n    // 估算文件大小（基于时长）\n    static estimateFileSize(duration) {\n        if (!duration) return 0;\n        // 假设平均码率为 1Mbps\n        return duration * 1024 * 1024 / 8;\n    }\n    // 格式化文件大小\n    static formatFileSize(bytes) {\n        if (bytes === 0) return '0 B';\n        const k = 1024;\n        const sizes = [\n            'B',\n            'KB',\n            'MB',\n            'GB',\n            'TB'\n        ];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n    // 格式化时长\n    static formatDuration(seconds) {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor(seconds % 3600 / 60);\n        const secs = Math.floor(seconds % 60);\n        if (hours > 0) {\n            return \"\".concat(hours, \":\").concat(minutes.toString().padStart(2, '0'), \":\").concat(secs.toString().padStart(2, '0'));\n        } else {\n            return \"\".concat(minutes, \":\").concat(secs.toString().padStart(2, '0'));\n        }\n    }\n    // {{ AURA: Add - 智能视频格式推断方法 }}\n    static inferVideoFormat(providedFormat, videoUrl) {\n        // 支持的视频格式列表\n        const validFormats = [\n            'mp4',\n            'avi',\n            'mov',\n            'wmv',\n            'flv',\n            'webm',\n            'mkv',\n            'm4v',\n            '3gp',\n            'f4v',\n            'asf',\n            'rm',\n            'rmvb',\n            'vob',\n            'ogv',\n            'm2ts',\n            'mts'\n        ];\n        // 验证提供的格式\n        if (providedFormat && validFormats.includes(providedFormat.toLowerCase())) {\n            return providedFormat.toLowerCase();\n        }\n        // 从URL推断\n        if (videoUrl) {\n            const urlFormat = this.extractFormatFromUrl(videoUrl);\n            if (urlFormat && validFormats.includes(urlFormat.toLowerCase())) {\n                return urlFormat.toLowerCase();\n            }\n        }\n        // 默认mp4\n        return 'mp4';\n    }\n    // {{ AURA: Add - 从URL提取格式扩展名 }}\n    static extractFormatFromUrl(url) {\n        try {\n            const urlObj = new URL(url);\n            const pathname = urlObj.pathname;\n            const lastDotIndex = pathname.lastIndexOf('.');\n            if (lastDotIndex !== -1) {\n                const extension = pathname.substring(lastDotIndex + 1);\n                return extension.toLowerCase();\n            }\n        } catch (e) {\n        // URL解析失败，忽略错误\n        }\n        return null;\n    }\n    // {{ AURA: Add - 验证视频格式是否有效 }}\n    static isValidVideoFormat(format) {\n        const validFormats = [\n            'mp4',\n            'avi',\n            'mov',\n            'wmv',\n            'flv',\n            'webm',\n            'mkv',\n            'm4v',\n            '3gp',\n            'f4v',\n            'asf',\n            'rm',\n            'rmvb',\n            'vob',\n            'ogv',\n            'm2ts',\n            'mts'\n        ];\n        return validFormats.includes(format.toLowerCase());\n    }\n    // {{ AURA: Add - 判断是否应该重试上传 }}\n    static shouldRetryUpload(error, attempt) {\n        // 如果是最后一次尝试，不重试\n        if (attempt >= 5) {\n            return false;\n        }\n        // 检查错误类型\n        if (error) {\n            const errorMessage = (error.message || error.toString()).toLowerCase();\n            // 对于网络错误始终重试\n            if (errorMessage.includes('network error') || errorMessage.includes('fetch failed') || errorMessage.includes('econnreset') || errorMessage.includes('timeout')) {\n                return true;\n            }\n            // 对于服务器错误(5xx)始终重试\n            if (errorMessage.includes('500') || errorMessage.includes('502') || errorMessage.includes('503') || errorMessage.includes('504')) {\n                return true;\n            }\n            // 对于权限错误(403/401)仅在第一次尝试时重试\n            if ((errorMessage.includes('403') || errorMessage.includes('401')) && attempt === 1) {\n                return true;\n            }\n        }\n        // 默认情况下，对于前几次尝试允许重试\n        return attempt < 3;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvY29udmVyc2lvbi50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRIO0FBQ2xGO0FBQ2M7QUFNakQsTUFBTUk7SUFDWCxTQUFTO0lBQ1QsYUFBYUMsV0FBV0MsUUFBZ0IsRUFBRUMsWUFBK0IsRUFBNEI7UUFDbkcsV0FBVztRQUNYLElBQUksQ0FBQ0QsWUFBWSxPQUFPQSxhQUFhLFlBQVksQ0FBQ0EsU0FBU0UsSUFBSSxJQUFJO1lBQ2pFLE1BQU0sSUFBSUMsTUFBTTtRQUNsQjtRQUVBLElBQUksQ0FBQ0YsZ0JBQWdCLENBQUNBLGFBQWFHLE1BQU0sRUFBRTtZQUN6QyxNQUFNLElBQUlELE1BQU07UUFDbEI7UUFFQSxJQUFJO1lBQ0YsaUJBQWlCO1lBQ2pCLE1BQU1FLGVBQWUsSUFBSSxDQUFDQyxjQUFjLENBQUNOO1lBQ3pDTyxRQUFRQyxHQUFHLENBQUMsZ0JBQTZCLE9BQWJIO1lBQzVCRSxRQUFRQyxHQUFHLENBQUMsb0JBQWtELE9BQTlCSCxhQUFhSSxTQUFTLENBQUMsR0FBRyxLQUFJO1lBRTlELE1BQU1DLFdBQVcsTUFBTUMsTUFBTSxxQkFBcUI7Z0JBQ2hEQyxRQUFRO2dCQUNSQyxTQUFTO29CQUNQLGdCQUFnQjtnQkFDbEI7Z0JBQ0FDLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQztvQkFDbkJoQixVQUFVSztvQkFDVko7Z0JBQ0Y7WUFDRjtZQUVBLHdDQUF3QztZQUN4QyxJQUFJZ0I7WUFDSixJQUFJO2dCQUNGLE1BQU1DLGVBQWUsTUFBTVIsU0FBU1MsSUFBSTtnQkFDeENaLFFBQVFDLEdBQUcsQ0FBQyxtQkFBNkNVLE9BQTFCUixTQUFTVSxNQUFNLEVBQUMsWUFBOEIsT0FBcEJGLGFBQWFHLE1BQU07Z0JBRTVFLElBQUksQ0FBQ0gsYUFBYWhCLElBQUksSUFBSTtvQkFDeEIsTUFBTSxJQUFJQyxNQUFNLG9CQUFvQyxPQUFoQk8sU0FBU1UsTUFBTSxFQUFDO2dCQUN0RDtnQkFFQUgsU0FBU0YsS0FBS08s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TztZQUFPO1lBQU87WUFBUTtZQUFPO1lBQ2xEO1lBQU87WUFBTztZQUFPO1lBQU07WUFBUTtZQUFPO1lBQU87WUFBUTtTQUMxRDtRQUNELE9BQU9BLGFBQWF0RyxRQUFRLENBQUNOLE9BQU82RyxXQUFXO0lBQ2pEO0lBRUEsK0JBQStCO0lBQy9CLE9BQWVoRyxrQkFBa0JuQyxLQUFVLEVBQUVtQixPQUFlLEVBQVc7UUFDckUsZ0JBQWdCO1FBQ2hCLElBQUlBLFdBQVcsR0FBRztZQUNoQixPQUFPO1FBQ1Q7UUFFQSxTQUFTO1FBQ1QsSUFBSW5CLE9BQU87WUFDVCxNQUFNZ0MsZUFBZSxDQUFDaEMsTUFBTUksT0FBTyxJQUFJSixNQUFNa0YsUUFBUSxFQUFDLEVBQUdpRCxXQUFXO1lBRXBFLGFBQWE7WUFDYixJQUFJbkcsYUFBYUosUUFBUSxDQUFDLG9CQUN0QkksYUFBYUosUUFBUSxDQUFDLG1CQUN0QkksYUFBYUosUUFBUSxDQUFDLGlCQUN0QkksYUFBYUosUUFBUSxDQUFDLFlBQVk7Z0JBQ3BDLE9BQU87WUFDVDtZQUVBLG1CQUFtQjtZQUNuQixJQUFJSSxhQUFhSixRQUFRLENBQUMsVUFDdEJJLGFBQWFKLFFBQVEsQ0FBQyxVQUN0QkksYUFBYUosUUFBUSxDQUFDLFVBQ3RCSSxhQUFhSixRQUFRLENBQUMsUUFBUTtnQkFDaEMsT0FBTztZQUNUO1lBRUEsNEJBQTRCO1lBQzVCLElBQUksQ0FBQ0ksYUFBYUosUUFBUSxDQUFDLFVBQVVJLGFBQWFKLFFBQVEsQ0FBQyxNQUFLLEtBQU1ULFlBQVksR0FBRztnQkFDbkYsT0FBTztZQUNUO1FBQ0Y7UUFFQSxvQkFBb0I7UUFDcEIsT0FBT0EsVUFBVTtJQUNuQjtBQUNGIiwic291cmNlcyI6WyJEOlxcR2l0SHViXFxkeWp4bmV4dFxcZHlqeFxcc3JjXFxsaWJcXGNvbnZlcnNpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udmVyc2lvblRhc2ssIEJhdGNoVGFzaywgVGFza1N0YXR1cywgVmlkZW9QYXJzZXJDb25maWcsIFdlYkRBVkNvbmZpZywgUGFyc2VkVmlkZW9JbmZvLCBNZWRpYVR5cGUgfSBmcm9tICdAL3R5cGVzJ1xyXG5pbXBvcnQgeyBDbGVhbnVwU2VydmljZSB9IGZyb20gJy4vY2xlYW51cCdcclxuaW1wb3J0IHsgRmlsZW5hbWVTYW5pdGl6ZXIgfSBmcm9tICcuL2ZpbGVuYW1lLXNhbml0aXplcidcclxuXHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQ29udmVyc2lvblNlcnZpY2Uge1xyXG4gIC8vIOino+aekOinhumikemTvuaOpVxyXG4gIHN0YXRpYyBhc3luYyBwYXJzZVZpZGVvKHZpZGVvVXJsOiBzdHJpbmcsIHBhcnNlckNvbmZpZzogVmlkZW9QYXJzZXJDb25maWcpOiBQcm9taXNlPFBhcnNlZFZpZGVvSW5mbz4ge1xyXG4gICAgLy8g6aaW5YWI6aqM6K+B6L6T5YWl5Y+C5pWwXHJcbiAgICBpZiAoIXZpZGVvVXJsIHx8IHR5cGVvZiB2aWRlb1VybCAhPT0gJ3N0cmluZycgfHwgIXZpZGVvVXJsLnRyaW0oKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+inhumikVVSTOS4uuepuicpXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmICghcGFyc2VyQ29uZmlnIHx8ICFwYXJzZXJDb25maWcuYXBpVXJsKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcign6Kej5p6QQVBJ6YWN572u5peg5pWIJylcclxuICAgIH1cclxuICAgIFxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8g5aSE55CG5YiG5Lqr5paH5pys77yM5o+Q5Y+W55yf5a6eVVJMXHJcbiAgICAgIGNvbnN0IGV4dHJhY3RlZFVybCA9IHRoaXMuZXh0cmFjdFJlYWxVcmwodmlkZW9VcmwpXHJcbiAgICAgIGNvbnNvbGUubG9nKGBb6L2s5a2YXSDmj5Dlj5bliLBVUkw6ICR7ZXh0cmFjdGVkVXJsfWApXHJcbiAgICAgIGNvbnNvbGUubG9nKGBb6L2s5a2YXSDlj5HpgIHop6PmnpDor7fmsYLvvIxVUkw6ICR7ZXh0cmFjdGVkVXJsLnN1YnN0cmluZygwLCA1MCl9Li4uYClcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvcHJveHkvcGFyc2VyJywge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICB2aWRlb1VybDogZXh0cmFjdGVkVXJsLCAvLyDkvb/nlKjmj5Dlj5blkI7nmoRVUkxcclxuICAgICAgICAgIHBhcnNlckNvbmZpZ1xyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICAvLyB7eyBBVVJBOiBNb2RpZnkgLSDmt7vliqDop6PmnpBBUEnnmoRKU09O6ZSZ6K+v5aSE55CGIH19XHJcbiAgICAgIGxldCByZXN1bHQ7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBb6L2s5a2YXSDop6PmnpBBUEnlk43lupTnirbmgIE6ICR7cmVzcG9uc2Uuc3RhdHVzfSwg5YaF5a656ZW/5bqmOiAke3Jlc3BvbnNlVGV4dC5sZW5ndGh9YCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCFyZXNwb25zZVRleHQudHJpbSgpKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYOino+aekOacjeWKoeWZqOi/lOWbnuepuuWTjeW6lCAoSFRUUCAke3Jlc3BvbnNlLnN0YXR1c30pYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzcG9uc2VUZXh0KTtcclxuICAgICAgfSBjYXRjaCAocGFyc2VFcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1vovazlrZhdIOino+aekEFQSSBKU09O6Kej5p6Q5aSx6LSlOicsIHBhcnNlRXJyb3IpO1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1vovazlrZhdIOino+aekEFQSeWTjeW6lOeKtuaAgTonLCByZXNwb25zZS5zdGF0dXMsIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOWwneivleiOt+WPlumDqOWIhuWTjeW6lOWGheWuueeUqOS6juiwg+ivlVxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlVGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKS5jYXRjaCgoKSA9PiAn5peg5rOV6I635Y+W5ZON5bqU5paH5pysJyk7XHJcbiAgICAgICAgY29uc3QgdHJ1bmNhdGVkVGV4dCA9IHJlc3BvbnNlVGV4dC5zdWJzdHJpbmcoMCwgNTAwKTtcclxuICAgICAgICBcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYOino+aekEFQSSBKU09O6Kej5p6Q5aSx6LSlIChIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfSk6ICR7cGFyc2VFcnJvciBpbnN0YW5jZW9mIEVycm9yID8gcGFyc2VFcnJvci5tZXNzYWdlIDogJ+acquefpeino+aekOmUmeivryd9LiDlk43lupTniYfmrrU6ICR7dHJ1bmNhdGVkVGV4dH1gKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYgKCFyZXN1bHQuc3VjY2Vzcykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihyZXN1bHQuZXJyb3IgfHwgJ+inhumikeino+aekOWksei0pScpXHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIOmqjOivgei/lOWbnueahOaVsOaNrlxyXG4gICAgICBpZiAoIXJlc3VsdC5kYXRhKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBUEnov5Tlm57nmoTmlbDmja7kuLrnqbonKVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyB7eyBBVVJBOiBNb2RpZnkgLSDnp7vpmaTmtYvor5VBUEnosIPnlKjvvIznm7TmjqXpqozor4HmlbDmja7lrozmlbTmgKcgfX1cclxuICAgICAgLy8g5a+55LqO6KeG6aKR57G75Z6L77yM5qOA5p+lVVJM5a2X5q61XHJcbiAgICAgIGlmIChyZXN1bHQuZGF0YS5tZWRpYVR5cGUgPT09IE1lZGlhVHlwZS5WSURFTyAmJiAhcmVzdWx0LmRhdGEudXJsKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfop4bpopHop6PmnpDmiJDlip/kvYbmnKrov5Tlm57mnInmlYjnmoTop4bpopFVUkwnKVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICAvLyDlr7nkuo7op4bpopHnsbvlnovvvIznoa7kv51VUkzlrZfmrrXmmK/mnInmlYjnmoTnvZHlnYBcclxuICAgICAgaWYgKHJlc3VsdC5kYXRhLm1lZGlhVHlwZSA9PT0gTWVkaWFUeXBlLlZJREVPICYmIHJlc3VsdC5kYXRhLnVybCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBuZXcgVVJMKHJlc3VsdC5kYXRhLnVybClcclxuICAgICAgICB9IGNhdGNoIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg6L+U5Zue55qEVVJM5peg5pWIOiAke3Jlc3VsdC5kYXRhLnVybH1gKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8g5a+55LqO5Zu+6ZuG57G75Z6L77yM5qOA5p+l5Zu+54mH5pWw57uEXHJcbiAgICAgIGlmIChyZXN1bHQuZGF0YS5tZWRpYVR5cGUgPT09IE1lZGlhVHlwZS5JTUFHRV9BTEJVTSkge1xyXG4gICAgICAgIGlmICghcmVzdWx0LmRhdGEuaW1hZ2VzIHx8IHJlc3VsdC5kYXRhLmltYWdlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcign5Zu+6ZuG6Kej5p6Q5oiQ5Yqf5L2G5rKh5pyJ5om+5Yiw5Lu75L2V5Zu+54mHJylcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coYFvovazlrZhdIOWbvumbhuino+aekOaIkOWKn++8jOWMheWQqyAke3Jlc3VsdC5kYXRhLmltYWdlcy5sZW5ndGh9IOW8oOWbvueJh2ApXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKGBb6L2s5a2YXSDop6PmnpDmiJDlip/vvIzojrflj5bliLAke3Jlc3VsdC5kYXRhLm1lZGlhVHlwZSA9PT0gTWVkaWFUeXBlLlZJREVPID8gJ+inhumikScgOiAn5Zu+6ZuGJ306ICR7cmVzdWx0LmRhdGEudGl0bGV9YClcclxuICAgICAgLy8ge3sgQVVSQTogTW9kaWZ5IC0g5L+u5aSN5Zu+6ZuG6Kej5p6Q5pe2dXJsLnN1YnN0cmluZ+mUmeivr++8jOa3u+WKoOexu+Wei+WIpOaWrSB9fVxyXG4gICAgICBpZiAocmVzdWx0LmRhdGEubWVkaWFUeXBlID09PSBNZWRpYVR5cGUuVklERU8gJiYgcmVzdWx0LmRhdGEudXJsICYmIHR5cGVvZiByZXN1bHQuZGF0YS51cmwgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFvovazlrZhdIOinhumikVVSTDogJHtyZXN1bHQuZGF0YS51cmwuc3Vic3RyaW5nKDAsIDUwKX0uLi5gKVxyXG4gICAgICB9IGVsc2UgaWYgKHJlc3VsdC5kYXRhLm1lZGlhVHlwZSA9PT0gTWVkaWFUeXBlLklNQUdFX0FMQlVNICYmIHJlc3VsdC5kYXRhLmltYWdlcykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBb6L2s5a2YXSDlm77pm4bljIXlkKsgJHtyZXN1bHQuZGF0YS5pbWFnZXMubGVuZ3RofSDlvKDlm77niYdgKVxyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gcmVzdWx0LmRhdGFcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1vovazlrZhdIOinhumikeino+aekOmUmeivrzonLCBlcnJvcilcclxuICAgICAgdGhyb3cgZXJyb3JcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIOS4iuS8oOWqkuS9k+WIsFdlYkRBVlxyXG4gIHN0YXRpYyBhc3luYyB1cGxvYWRUb1dlYkRBVihcclxuICAgIG1lZGlhSW5mbzogUGFyc2VkVmlkZW9JbmZvLFxyXG4gICAgd2ViZGF2Q29uZmlnOiBXZWJEQVZDb25maWcsXHJcbiAgICBmb2xkZXJQYXRoPzogc3RyaW5nXHJcbiAgKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIGNvbnN0IG1heFJldHJpZXMgPSA1OyAvLyDlop7liqDmnIDlpKfph43or5XmrKHmlbDliLA15qyhXHJcbiAgICBsZXQgYXR0ZW1wdCA9IDA7XHJcbiAgICBsZXQgbGFzdEVycm9yO1xyXG4gICAgXHJcbiAgICAvLyDmoLnmja7lqpLkvZPnsbvlnovnlJ/miJDmlofku7blkI1cclxuICAgIGxldCBmaWxlTmFtZSA9ICcnO1xyXG4gICAgaWYgKG1lZGlhSW5mby5tZWRpYVR5cGUgPT09IE1lZGlhVHlwZS5WSURFTyAmJiBtZWRpYUluZm8udXJsKSB7XHJcbiAgICAgIC8vIOinhumikeaWh+S7tuWQjVxyXG4gICAgICBjb25zdCBmb3JtYXQgPSB0aGlzLmluZmVyVmlkZW9Gb3JtYXQobWVkaWFJbmZvLmZvcm1hdCwgbWVkaWFJbmZvLnVybCk7XHJcbiAgICAgIGZpbGVOYW1lID0gdGhpcy5nZW5lcmF0ZUZpbGVOYW1lKG1lZGlhSW5mby50aXRsZSwgZm9ybWF0KTtcclxuICAgIH0gZWxzZSBpZiAobWVkaWFJbmZvLm1lZGlhVHlwZSA9PT0gTWVkaWFUeXBlLklNQUdFX0FMQlVNICYmIG1lZGlhSW5mby5pbWFnZXMgJiYgbWVkaWFJbmZvLmltYWdlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIC8vIOWbvumbhuaWh+S7tuWkueWQjSAtIOS9v+eUqOino+aekOWQjueahOagh+mimOWQjeensFxyXG4gICAgICBmaWxlTmFtZSA9IHRoaXMuZ2VuZXJhdGVGb2xkZXJOYW1lKG1lZGlhSW5mby50aXRsZSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHdoaWxlIChhdHRlbXB0IDwgbWF4UmV0cmllcykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGF0dGVtcHQrKztcclxuICAgICAgICBjb25zb2xlLmxvZyhgW+i9rOWtmF0gV2ViREFW5LiK5Lyg5bCd6K+VICR7YXR0ZW1wdH0vJHttYXhSZXRyaWVzfTogJHttZWRpYUluZm8ubWVkaWFUeXBlID09PSBNZWRpYVR5cGUuVklERU8gPyAn6KeG6aKRJyA6ICflm77pm4YnfWApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvcHJveHkvd2ViZGF2Jywge1xyXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICB2aWRlb1VybDogbWVkaWFJbmZvLm1lZGlhVHlwZSA9PT0gTWVkaWFUeXBlLlZJREVPID8gbWVkaWFJbmZvLnVybCA6IHVuZGVmaW5lZCwgLy8g6KeG6aKRVVJMXHJcbiAgICAgICAgICAgIGltYWdlczogbWVkaWFJbmZvLm1lZGlhVHlwZSA9PT0gTWVkaWFUeXBlLklNQUdFX0FMQlVNID8gbWVkaWFJbmZvLmltYWdlcyA6IHVuZGVmaW5lZCwgLy8g5Zu+6ZuG5Zu+54mH5YiX6KGoXHJcbiAgICAgICAgICAgIHdlYmRhdkNvbmZpZyxcclxuICAgICAgICAgICAgZmlsZU5hbWUsIC8vIOaWh+S7tuWQjVxyXG4gICAgICAgICAgICBmb2xkZXJQYXRoOiBmb2xkZXJQYXRoIHx8ICcnXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyB7eyBBVVJBOiBNb2RpZnkgLSDmt7vliqDmm7TlvLrnmoRKU09O6Kej5p6Q6ZSZ6K+v5aSE55CGIH19XHJcbiAgICAgICAgbGV0IHJlc3VsdDtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY29uc3QgcmVzcG9uc2VUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYFvovazlrZhdIOWOn+Wni+WTjeW6lOeKtuaAgTogJHtyZXNwb25zZS5zdGF0dXN9LCDlhoXlrrnplb/luqY6ICR7cmVzcG9uc2VUZXh0Lmxlbmd0aH1gKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYgKCFyZXNwb25zZVRleHQudHJpbSgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg5pyN5Yqh5Zmo6L+U5Zue56m65ZON5bqUIChIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfSlgKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXNwb25zZVRleHQpO1xyXG4gICAgICAgIH0gY2F0Y2ggKHBhcnNlRXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1vovazlrZhdIEpTT07op6PmnpDlpLHotKU6JywgcGFyc2VFcnJvcik7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdb6L2s5a2YXSDlk43lupTnirbmgIE6JywgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8g5bCd6K+V6I635Y+W6YOo5YiG5ZON5bqU5YaF5a6555So5LqO6LCD6K+VXHJcbiAgICAgICAgICBjb25zdCByZXNwb25zZVRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCkuY2F0Y2goKCkgPT4gJ+aXoOazleiOt+WPluWTjeW6lOaWh+acrCcpO1xyXG4gICAgICAgICAgY29uc3QgdHJ1bmNhdGVkVGV4dCA9IHJlc3BvbnNlVGV4dC5zdWJzdHJpbmcoMCwgNTAwKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBKU09O6Kej5p6Q5aSx6LSlIChIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfSk6ICR7cGFyc2VFcnJvciBpbnN0YW5jZW9mIEVycm9yID8gcGFyc2VFcnJvci5tZXNzYWdlIDogJ+acquefpeino+aekOmUmeivryd9LiDlk43lupTniYfmrrU6ICR7dHJ1bmNhdGVkVGV4dH1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCFyZXN1bHQuc3VjY2Vzcykge1xyXG4gICAgICAgICAgLy8g5a+55LqONDAzLzQwMemUmeivr++8jOWcqOesrOS4gOasoeWwneivleaXtui/m+ihjOmHjeivlVxyXG4gICAgICAgICAgY29uc3Qgc2hvdWxkUmV0cnlJbW1lZGlhdGVseSA9XHJcbiAgICAgICAgICAgIChyZXN1bHQuZXJyb3I/LmluY2x1ZGVzKCc0MDMnKSB8fCByZXN1bHQuZXJyb3I/LmluY2x1ZGVzKCc0MDEnKSkgJiZcclxuICAgICAgICAgICAgYXR0ZW1wdCA9PT0gMTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICBpZiAoc2hvdWxkUmV0cnlJbW1lZGlhdGVseSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW+i9rOWtmF0g5p2D6ZmQ6ZSZ6K+v77yM56uL5Y2z6L+b6KGM6YeN6K+VJyk7XHJcbiAgICAgICAgICAgIC8vIOetieW+heS4gOWwj+auteaXtumXtOWQjueri+WNs+mHjeivlVxyXG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwMCkpO1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8g5a+55LqONDA06ZSZ6K+v77yM5o+Q5L6b5pu05YW35L2T55qE6ZSZ6K+v5L+h5oGvXHJcbiAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gcmVzdWx0LmVycm9yIHx8ICflqpLkvZPkuIrkvKDlpLHotKUnO1xyXG4gICAgICAgICAgaWYgKHJlc3VsdC5lcnJvcj8uaW5jbHVkZXMoJzQwNCcpKSB7XHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IGDkuIrkvKDot6/lvoTkuI3lrZjlnKggKDQwNCnjgILor7fmo4Dmn6VXZWJEQVbmnI3liqHlmajlnLDlnYDlkozot6/lvoTphY3nva7mmK/lkKbmraPnoa7jgILplJnor6/or6bmg4U6ICR7cmVzdWx0LmVycm9yfWA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coYFvovazlrZhdIOS4iuS8oOaIkOWKn++8jOWwneivleasoeaVsDogJHthdHRlbXB0fWApO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQuZmlsZVBhdGg7XHJcbiAgICAgICAgXHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgbGFzdEVycm9yID0gZXJyb3I7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgW+i9rOWtmF0g5LiK5Lyg5bCd6K+VICR7YXR0ZW1wdH0g5aSx6LSlOmAsIGVycm9yKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDmo4Dmn6XmmK/lkKbpnIDopoHph43or5VcclxuICAgICAgICBjb25zdCBzaG91bGRSZXRyeSA9IHRoaXMuc2hvdWxkUmV0cnlVcGxvYWQoZXJyb3IsIGF0dGVtcHQpO1xyXG4gICAgICAgIGlmIChhdHRlbXB0IDwgbWF4UmV0cmllcyAmJiBzaG91bGRSZXRyeSkge1xyXG4gICAgICAgICAgLy8g5L2/55So5oyH5pWw6YCA6YG/562W55WlXHJcbiAgICAgICAgICBjb25zdCB3YWl0VGltZSA9IE1hdGgubWluKDEwMDAgKiBNYXRoLnBvdygyLCBhdHRlbXB0IC0gMSksIDEwMDAwKTsgLy8g5pyA5aSn562J5b6FMTDnp5JcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGBb6L2s5a2YXSDnrYnlvoUgJHt3YWl0VGltZS8xMDAwfSDnp5LlkI7ph43or5UuLi5gKTtcclxuICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCB3YWl0VGltZSkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBicmVhazsgLy8g5LiN5YaN6YeN6K+VXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOaJgOacieWwneivlemDveWksei0pVxyXG4gICAgY29uc29sZS5lcnJvcignW+i9rOWtmF0g5omA5pyJ5LiK5Lyg5bCd6K+V5Z2H5aSx6LSlJyk7XHJcbiAgICB0aHJvdyBsYXN0RXJyb3IgfHwgbmV3IEVycm9yKCfop4bpopHkuIrkvKDlpLHotKXvvIzlt7Lovr7liLDmnIDlpKfph43or5XmrKHmlbAnKTtcclxuICB9XHJcblxyXG4gIC8vIOWNleS4quinhumikei9rOWtmFxyXG4gIHN0YXRpYyBhc3luYyBjb252ZXJ0U2luZ2xlKFxyXG4gICAgdGFzazogQ29udmVyc2lvblRhc2ssXHJcbiAgICBwYXJzZXJDb25maWc6IFZpZGVvUGFyc2VyQ29uZmlnLFxyXG4gICAgd2ViZGF2Q29uZmlnOiBXZWJEQVZDb25maWcsXHJcbiAgICBvblByb2dyZXNzPzogKHByb2dyZXNzOiBudW1iZXIsIHN0YXR1czogVGFza1N0YXR1cykgPT4gdm9pZFxyXG4gICk6IFByb21pc2U8Q29udmVyc2lvblRhc2s+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIOabtOaWsOeKtuaAgeS4uuino+aekOS4rVxyXG4gICAgICB0YXNrLnN0YXR1cyA9IFRhc2tTdGF0dXMuUEFSU0lOR1xyXG4gICAgICBvblByb2dyZXNzPy4oMjAsIFRhc2tTdGF0dXMuUEFSU0lORylcclxuICAgICAgXHJcbiAgICAgIGNvbnNvbGUubG9nKGBb6L2s5a2YXSDlvIDlp4vop6PmnpDop4bpopE6ICR7dGFzay52aWRlb1VybH1gKVxyXG4gICAgICBjb25zb2xlLmxvZyhgW+i9rOWtmF0g5L2/55So6Kej5p6Q5ZmoOiAke3BhcnNlckNvbmZpZy5uYW1lfSAoJHtwYXJzZXJDb25maWcuYXBpVXJsfSlgKVxyXG5cclxuICAgICAgLy8g6Kej5p6Q6KeG6aKRXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgLy8g5re75Yqg6KeG6aKRVVJM5qC85byP5qOA5p+lXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWRVcmwodGFzay52aWRlb1VybCkpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcign6KeG6aKR6ZO+5o6l5qC85byP5peg5pWI77yM6K+356Gu5L+d5LulaHR0cDovL+aIlmh0dHBzOi8v5byA5aS0JylcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8ge3sgQVVSQTogTW9kaWZ5IC0g56e76Zmk5aSH55So5rWL6K+V5qih5byP77yM55u05o6l5L2/55So5Li76Kej5p6Q57uT5p6cIH19XHJcbiAgICAgICAgbGV0IHBhcnNlZEluZm87XHJcbiAgICAgICAgXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHBhcnNlZEluZm8gPSBhd2FpdCB0aGlzLnBhcnNlVmlkZW8odGFzay52aWRlb1VybCwgcGFyc2VyQ29uZmlnKVxyXG4gICAgICAgICAgY29uc29sZS5sb2coYFvovazlrZhdIOino+aekOaIkOWKn++8jOWqkuS9k+exu+WeizogJHtwYXJzZWRJbmZvLm1lZGlhVHlwZX1gKVxyXG4gICAgICAgIH0gY2F0Y2ggKHBhcnNlRXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1vovazlrZhdIOino+aekOWksei0pTonLCBwYXJzZUVycm9yKVxyXG4gICAgICAgICAgdGhyb3cgcGFyc2VFcnJvclxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0YXNrLnBhcnNlZFZpZGVvSW5mbyA9IHBhcnNlZEluZm9cclxuICAgICAgICB0YXNrLnZpZGVvVGl0bGUgPSBwYXJzZWRJbmZvLnRpdGxlXHJcbiAgICAgICAgY29uc29sZS5sb2coYFvovazlrZhdIOino+aekOWujOaIkDogJHtwYXJzZWRJbmZvLnRpdGxlfWApXHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignW+i9rOWtmF0g6KeG6aKR6Kej5p6Q5aSx6LSlOicsIGVycm9yKVxyXG4gICAgICAgIHRhc2suc3RhdHVzID0gVGFza1N0YXR1cy5GQUlMRURcclxuICAgICAgICBsZXQgZXJyb3JNc2cgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICfop4bpopHop6PmnpDlpLHotKUnXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8g5re75Yqg5pu05Y+L5aW955qE6ZSZ6K+v5L+h5oGvXHJcbiAgICAgICAgaWYgKGVycm9yTXNnLmluY2x1ZGVzKCdVUkzkuLrnqbonKSkge1xyXG4gICAgICAgICAgZXJyb3JNc2cgPSAnVVJM5Li656m6IC0g6Kej5p6QQVBJ5peg5rOV5o+Q5Y+W6KeG6aKRVVJM77yM6K+35bCd6K+V5YW25LuW6Kej5p6QQVBJ5oiW5qOA5p+l6ZO+5o6lJ1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICB0YXNrLmVycm9yID0gZXJyb3JNc2dcclxuICAgICAgICB0YXNrLmNvbXBsZXRlZEF0ID0gbmV3IERhdGUoKVxyXG4gICAgICAgIHJldHVybiB0YXNrXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG9uUHJvZ3Jlc3M/Lig1MCwgVGFza1N0YXR1cy5QQVJTSU5HKVxyXG4gICAgICBcclxuICAgICAgLy8g5pu05paw54q25oCB5Li65LiK5Lyg5LitXHJcbiAgICAgIHRhc2suc3RhdHVzID0gVGFza1N0YXR1cy5VUExPQURJTkdcclxuICAgICAgb25Qcm9ncmVzcz8uKDYwLCBUYXNrU3RhdHVzLlVQTE9BRElORylcclxuXHJcbiAgICAgIC8vIOS4iuS8oOWqkuS9k1xyXG4gICAgICBjb25zdCBmaWxlUGF0aCA9IGF3YWl0IHRoaXMudXBsb2FkVG9XZWJEQVYoXHJcbiAgICAgICAgdGFzay5wYXJzZWRWaWRlb0luZm8hLCBcclxuICAgICAgICB3ZWJkYXZDb25maWdcclxuICAgICAgKVxyXG5cclxuICAgICAgLy8g5pu05paw5Lu75Yqh54q25oCBXHJcbiAgICAgIHRhc2suc3RhdHVzID0gVGFza1N0YXR1cy5TVUNDRVNTXHJcbiAgICAgIHRhc2suY29tcGxldGVkQXQgPSBuZXcgRGF0ZSgpXHJcbiAgICAgIHRhc2sudXBsb2FkUmVzdWx0ID0ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgZmlsZVBhdGhcclxuICAgICAgfVxyXG5cclxuICAgICAgb25Qcm9ncmVzcz8uKDEwMCwgVGFza1N0YXR1cy5TVUNDRVNTKVxyXG5cclxuLy8g5Lu75Yqh5a6M5oiQ5ZCO5omn6KGM5riF55CGXHJcbiAgICAgIGF3YWl0IENsZWFudXBTZXJ2aWNlLmNsZWFudXBBZnRlclRhc2tDb21wbGV0aW9uKHRhc2spO1xyXG4gICAgICByZXR1cm4gdGFza1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgLy8g5pu05paw5Lu75Yqh5Li65aSx6LSl54q25oCBXHJcbiAgICAgIHRhc2suc3RhdHVzID0gVGFza1N0YXR1cy5GQUlMRURcclxuICAgICAgdGFzay5jb21wbGV0ZWRBdCA9IG5ldyBEYXRlKClcclxuICAgICAgdGFzay5lcnJvciA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ+i9rOWtmOi/h+eoi+S4reWPkeeUn+acquefpemUmeivrydcclxuICAgICAgdGFzay51cGxvYWRSZXN1bHQgPSB7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6IHRhc2suZXJyb3JcclxuICAgICAgfVxyXG5cclxuLy8g5Lu75Yqh5a6M5oiQ5ZCO5omn6KGM5riF55CGXHJcbiAgICAgIGF3YWl0IENsZWFudXBTZXJ2aWNlLmNsZWFudXBBZnRlclRhc2tDb21wbGV0aW9uKHRhc2spO1xyXG4gICAgICBvblByb2dyZXNzPy4oMCwgVGFza1N0YXR1cy5GQUlMRUQpXHJcblxyXG4gICAgICByZXR1cm4gdGFza1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8g5om56YeP6L2s5a2YXHJcbiAgc3RhdGljIGFzeW5jIGNvbnZlcnRCYXRjaChcclxuICAgIGJhdGNoVGFzazogQmF0Y2hUYXNrLFxyXG4gICAgb25Qcm9ncmVzcz86IChiYXRjaFByb2dyZXNzOiBudW1iZXIsIGN1cnJlbnRUYXNrPzogQ29udmVyc2lvblRhc2spID0+IHZvaWRcclxuICApOiBQcm9taXNlPEJhdGNoVGFzaz4ge1xyXG4gICAgYmF0Y2hUYXNrLnN0YXR1cyA9IFRhc2tTdGF0dXMuUEFSU0lOR1xyXG4gICAgXHJcbiAgICBjb25zdCB0b3RhbFRhc2tzID0gYmF0Y2hUYXNrLnRhc2tzLmxlbmd0aFxyXG4gICAgbGV0IGNvbXBsZXRlZFRhc2tzID0gMFxyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmF0Y2hUYXNrLnRhc2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IHRhc2sgPSBiYXRjaFRhc2sudGFza3NbaV1cclxuICAgICAgXHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgLy8g5aSE55CG5Y2V5Liq5Lu75YqhXHJcbiAgICAgICAgY29uc3QgdXBkYXRlZFRhc2sgPSBhd2FpdCB0aGlzLmNvbnZlcnRTaW5nbGUoXHJcbiAgICAgICAgICB0YXNrLFxyXG4gICAgICAgICAgYmF0Y2hUYXNrLnBhcnNlckNvbmZpZyxcclxuICAgICAgICAgIGJhdGNoVGFzay53ZWJkYXZDb25maWcsXHJcbiAgICAgICAgICAocHJvZ3Jlc3MsIHN0YXR1cykgPT4ge1xyXG4gICAgICAgICAgICAvLyDorqHnrpfmgLvkvZPov5vluqZcclxuICAgICAgICAgICAgY29uc3QgdGFza1Byb2dyZXNzID0gKGNvbXBsZXRlZFRhc2tzICsgcHJvZ3Jlc3MgLyAxMDApIC8gdG90YWxUYXNrcyAqIDEwMFxyXG4gICAgICAgICAgICBvblByb2dyZXNzPy4odGFza1Byb2dyZXNzLCB0YXNrKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIClcclxuXHJcbiAgICAgICAgYmF0Y2hUYXNrLnRhc2tzW2ldID0gdXBkYXRlZFRhc2tcclxuICAgICAgICBcclxuICAgICAgICBpZiAodXBkYXRlZFRhc2suc3RhdHVzID09PSBUYXNrU3RhdHVzLlNVQ0NFU1MpIHtcclxuICAgICAgICAgIGNvbXBsZXRlZFRhc2tzKytcclxuICAgICAgICB9XHJcblxyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYOaJuemHj+S7u+WKoeS4reeahOWNleS4quS7u+WKoeWksei0pTpgLCBlcnJvcilcclxuICAgICAgICAvLyDnu6fnu63lpITnkIbkuIvkuIDkuKrku7vliqFcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g5pu05paw5om56YeP5Lu75Yqh54q25oCBXHJcbiAgICAgIGJhdGNoVGFzay5jb21wbGV0ZWRUYXNrcyA9IGNvbXBsZXRlZFRhc2tzXHJcbiAgICAgIFxyXG4gICAgICAvLyDorqHnrpfmgLvkvZPov5vluqZcclxuICAgICAgY29uc3Qgb3ZlcmFsbFByb2dyZXNzID0gKGkgKyAxKSAvIHRvdGFsVGFza3MgKiAxMDBcclxuICAgICAgb25Qcm9ncmVzcz8uKG92ZXJhbGxQcm9ncmVzcywgdGFzaylcclxuXHJcbiAgICAgIC8vIOa3u+WKoOW7tui/n+mBv+WFjeivt+axgui/h+S6jumikee5gVxyXG4gICAgICBpZiAoaSA8IGJhdGNoVGFzay50YXNrcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5pu05paw5om56YeP5Lu75Yqh5pyA57uI54q25oCBXHJcbiAgICBiYXRjaFRhc2suY29tcGxldGVkQXQgPSBuZXcgRGF0ZSgpXHJcbiAgICBcclxuICAgIGlmIChjb21wbGV0ZWRUYXNrcyA9PT0gdG90YWxUYXNrcykge1xyXG4gICAgICBiYXRjaFRhc2suc3RhdHVzID0gVGFza1N0YXR1cy5TVUNDRVNTXHJcbi8vIOaJuemHj+S7u+WKoeWujOaIkOWQjuaJp+ihjOa4heeQhlxyXG4gICAgICBhd2FpdCBDbGVhbnVwU2VydmljZS5jbGVhbnVwQWZ0ZXJUYXNrQ29tcGxldGlvbihiYXRjaFRhc2spO1xyXG4gICAgfSBlbHNlIGlmIChjb21wbGV0ZWRUYXNrcyA9PT0gMCkge1xyXG4gICAgICBiYXRjaFRhc2suc3RhdHVzID0gVGFza1N0YXR1cy5GQUlMRURcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGJhdGNoVGFzay5zdGF0dXMgPSBUYXNrU3RhdHVzLlNVQ0NFU1MgLy8g6YOo5YiG5oiQ5Yqf5Lmf5qCH6K6w5Li65oiQ5YqfXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGJhdGNoVGFza1xyXG4gIH1cclxuXHJcbiAgLy8g55Sf5oiQ5paH5Lu25ZCNXHJcbiAgcHJpdmF0ZSBzdGF0aWMgZ2VuZXJhdGVGaWxlTmFtZSh0aXRsZTogc3RyaW5nLCBmb3JtYXQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAvLyB7eyBBVVJBOiBNb2RpZnkgLSDkvb/nlKhGaWxlbmFtZVNhbml0aXplcui/m+ihjOaWh+S7tuWQjeinhOiMg+WMliB9fVxyXG4gICAgY29uc3Qgc2FuaXRpemVkVGl0bGUgPSBGaWxlbmFtZVNhbml0aXplci5zYW5pdGl6ZSh0aXRsZSwge1xyXG4gICAgICByZXBsYWNlbWVudDogJ18nLFxyXG4gICAgICBtYXhMZW5ndGg6IDEwMCxcclxuICAgICAgcHJlc2VydmVFeHRlbnNpb246IGZhbHNlLFxyXG4gICAgICBhZGRUaW1lc3RhbXA6IHRydWVcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOenu+mZpOWPr+iDveeahOaJqeWxleWQje+8jOehruS/neagvOW8j+ato+ehrlxyXG4gICAgY29uc3QgbmFtZVdpdGhvdXRFeHQgPSBzYW5pdGl6ZWRUaXRsZS5yZXBsYWNlKC9cXC5bXi5dKiQvLCAnJyk7XHJcbiAgICByZXR1cm4gYCR7bmFtZVdpdGhvdXRFeHR9LiR7Zm9ybWF0fWA7XHJcbiAgfVxyXG5cclxuICAvLyDnlJ/miJDmlofku7blpLnlkI3vvIjnlKjkuo7lm77pm4bvvIlcclxuICBwcml2YXRlIHN0YXRpYyBnZW5lcmF0ZUZvbGRlck5hbWUodGl0bGU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAvLyB7eyBBVVJBOiBNb2RpZnkgLSDkvb/nlKhGaWxlbmFtZVNhbml0aXplcui/m+ihjOaWh+S7tuWkueWQjeinhOiMg+WMliB9fVxyXG4gICAgcmV0dXJuIEZpbGVuYW1lU2FuaXRpemVyLnNhbml0aXplKHRpdGxlLCB7XHJcbiAgICAgIHJlcGxhY2VtZW50OiAnXycsXHJcbiAgICAgIG1heExlbmd0aDogMTAwLFxyXG4gICAgICBwcmVzZXJ2ZUV4dGVuc2lvbjogZmFsc2UsXHJcbiAgICAgIGFkZFRpbWVzdGFtcDogZmFsc2VcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8g5rWL6K+VV2ViREFW6L+e5o6lXHJcbiAgc3RhdGljIGFzeW5jIHRlc3RXZWJEQVZDb25uZWN0aW9uKHdlYmRhdkNvbmZpZzogV2ViREFWQ29uZmlnKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U6IHN0cmluZyB9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyDnoa7kv51VUkznvJbnoIHmraPnoa7vvIzpgb/lhY3nibnmrorlrZfnrKbpl67pophcclxuICAgICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7XHJcbiAgICAgICAgc2VydmVyVXJsOiBlbmNvZGVVUklDb21wb25lbnQod2ViZGF2Q29uZmlnLnVybCksXHJcbiAgICAgICAgdXNlcm5hbWU6IGVuY29kZVVSSUNvbXBvbmVudCh3ZWJkYXZDb25maWcudXNlcm5hbWUpLFxyXG4gICAgICAgIHBhc3N3b3JkOiBlbmNvZGVVUklDb21wb25lbnQod2ViZGF2Q29uZmlnLnBhc3N3b3JkKVxyXG4gICAgICB9KVxyXG5cclxuICAgICAgY29uc29sZS5sb2coYFtXZWJEQVZdIOa1i+ivlei/nuaOpTogJHt3ZWJkYXZDb25maWcudXJsfWApXHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvcHJveHkvd2ViZGF2PyR7cGFyYW1zLnRvU3RyaW5nKCl9YClcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IHJlc3VsdC5zdWNjZXNzLFxyXG4gICAgICAgIG1lc3NhZ2U6IHJlc3VsdC5zdWNjZXNzID8gJ+i/nuaOpea1i+ivleaIkOWKnycgOiByZXN1bHQuZXJyb3IgfHwgJ+i/nuaOpea1i+ivleWksei0pSdcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW1dlYkRBVl0g6L+e5o6l5rWL6K+V6ZSZ6K+vOicsIGVycm9yKVxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIG1lc3NhZ2U6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ+i/nuaOpea1i+ivleWksei0pSdcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8ge3sgQVVSQTogQWRkIC0g5paH5Lu25ZCN6KeE6IyD5YyW5pa55rOV77yM55So5LqO5aSE55CG55So5oi35LiK5Lyg55qE5paH5Lu2IH19XHJcbiAgc3RhdGljIHNhbml0aXplVXBsb2FkRmlsZW5hbWUoZmlsZW5hbWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBjb25zb2xlLmxvZyhgW+aWh+S7tuWQjeinhOiMg+WMll0g5Y6f5aeL5paH5Lu25ZCNOiAke2ZpbGVuYW1lfWApO1xyXG4gICAgXHJcbiAgICAvLyDmo4DmtYvnibnmrornrKblj7dcclxuICAgIGNvbnN0IHNwZWNpYWxDaGFycyA9IEZpbGVuYW1lU2FuaXRpemVyLmRldGVjdFNwZWNpYWxDaGFycyhmaWxlbmFtZSk7XHJcbiAgICBpZiAoc3BlY2lhbENoYXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc29sZS5sb2coYFvmlofku7blkI3op4TojIPljJZdIOajgOa1i+WIsOeJueauiuespuWPtzogJHtzcGVjaWFsQ2hhcnMuam9pbignLCAnKX1gKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g6L+b6KGM6KeE6IyD5YyW5aSE55CGXHJcbiAgICBjb25zdCBzYW5pdGl6ZWQgPSBGaWxlbmFtZVNhbml0aXplci5zYW5pdGl6ZShmaWxlbmFtZSwge1xyXG4gICAgICByZXBsYWNlbWVudDogJ18nLFxyXG4gICAgICBtYXhMZW5ndGg6IDE1MCxcclxuICAgICAgcHJlc2VydmVFeHRlbnNpb246IHRydWUsXHJcbiAgICAgIGFkZFRpbWVzdGFtcDogZmFsc2VcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZyhgW+aWh+S7tuWQjeinhOiMg+WMll0g6KeE6IyD5YyW5ZCO5paH5Lu25ZCNOiAke3Nhbml0aXplZH1gKTtcclxuICAgIHJldHVybiBzYW5pdGl6ZWQ7XHJcbiAgfVxyXG5cclxuICAvLyB7eyBBVVJBOiBBZGQgLSDmibnph4/mlofku7blkI3op4TojIPljJbmlrnms5UgfX1cclxuICBzdGF0aWMgc2FuaXRpemVVcGxvYWRGaWxlbmFtZXMoZmlsZW5hbWVzOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuICAgIGNvbnNvbGUubG9nKGBb5om56YeP5paH5Lu25ZCN6KeE6IyD5YyWXSDlpITnkIYgJHtmaWxlbmFtZXMubGVuZ3RofSDkuKrmlofku7blkI1gKTtcclxuICAgIFxyXG4gICAgY29uc3Qgc2FuaXRpemVkID0gRmlsZW5hbWVTYW5pdGl6ZXIuc2FuaXRpemVCYXRjaChmaWxlbmFtZXMsIHtcclxuICAgICAgcmVwbGFjZW1lbnQ6ICdfJyxcclxuICAgICAgbWF4TGVuZ3RoOiAxNTAsXHJcbiAgICAgIHByZXNlcnZlRXh0ZW5zaW9uOiB0cnVlLFxyXG4gICAgICBhZGRUaW1lc3RhbXA6IGZhbHNlXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8g6L6T5Ye65aSE55CG57uT5p6cXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVuYW1lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAoZmlsZW5hbWVzW2ldICE9PSBzYW5pdGl6ZWRbaV0pIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgW+aJuemHj+aWh+S7tuWQjeinhOiMg+WMll0gJHtmaWxlbmFtZXNbaV19IC0+ICR7c2FuaXRpemVkW2ldfWApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBzYW5pdGl6ZWQ7XHJcbiAgfVxyXG5cclxuICAvLyB7eyBBVVJBOiBBZGQgLSDpqozor4Hmlofku7blkI3mmK/lkKbnrKblkIjop4TojIMgfX1cclxuICBzdGF0aWMgdmFsaWRhdGVGaWxlbmFtZShmaWxlbmFtZTogc3RyaW5nKToge1xyXG4gICAgaXNWYWxpZDogYm9vbGVhbjtcclxuICAgIGlzc3Vlczogc3RyaW5nW107XHJcbiAgICBzYW5pdGl6ZWQ6IHN0cmluZztcclxuICB9IHtcclxuICAgIGNvbnN0IHZhbGlkYXRpb24gPSBGaWxlbmFtZVNhbml0aXplci52YWxpZGF0ZShmaWxlbmFtZSk7XHJcbiAgICBjb25zdCBzYW5pdGl6ZWQgPSB0aGlzLnNhbml0aXplVXBsb2FkRmlsZW5hbWUoZmlsZW5hbWUpO1xyXG4gICAgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpc1ZhbGlkOiB2YWxpZGF0aW9uLmlzVmFsaWQsXHJcbiAgICAgIGlzc3VlczogdmFsaWRhdGlvbi5pc3N1ZXMsXHJcbiAgICAgIHNhbml0aXplZDogc2FuaXRpemVkXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8g55Sf5oiQ5Lu75YqhSURcclxuICBzdGF0aWMgZ2VuZXJhdGVUYXNrSWQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgdGFza18ke0RhdGUubm93KCl9XyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWBcclxuICB9XHJcblxyXG4gIC8vIOeUn+aIkOaJuemHj+S7u+WKoUlEXHJcbiAgc3RhdGljIGdlbmVyYXRlQmF0Y2hJZCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGBiYXRjaF8ke0RhdGUubm93KCl9XyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWBcclxuICB9XHJcblxyXG4gIC8vIOino+aekOinhumikemTvuaOpeWIl+ihqFxyXG4gIHN0YXRpYyBwYXJzZVZpZGVvVXJscyh0ZXh0OiBzdHJpbmcpOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBsaW5lcyA9IHRleHQuc3BsaXQoJ1xcbicpXHJcbiAgICBjb25zdCB1cmxzOiBzdHJpbmdbXSA9IFtdXHJcbiAgICBcclxuICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xyXG4gICAgICBjb25zdCB0cmltbWVkID0gbGluZS50cmltKClcclxuICAgICAgaWYgKHRyaW1tZWQpIHtcclxuICAgICAgICAvLyDlsJ3or5Xku47ljIXlkKvlhbbku5bmloflrZfnmoTovpPlhaXkuK3mj5Dlj5ZVUkxcclxuICAgICAgICBjb25zdCBleHRyYWN0ZWRVcmwgPSB0aGlzLmV4dHJhY3RSZWFsVXJsKHRyaW1tZWQpXHJcbiAgICAgICAgaWYgKGV4dHJhY3RlZFVybCAmJiB0aGlzLmlzVmFsaWRVcmwoZXh0cmFjdGVkVXJsKSkge1xyXG4gICAgICAgICAgdXJscy5wdXNoKGV4dHJhY3RlZFVybClcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHVybHNcclxuICB9XHJcblxyXG4gIC8vIOmqjOivgVVSTOagvOW8j1xyXG4gIHByaXZhdGUgc3RhdGljIGlzVmFsaWRVcmwodXJsOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIOmmluWFiOaPkOWPluaKlumfs+etieW5s+WPsOeahOecn+WunumTvuaOpVxyXG4gICAgICBjb25zdCBleHRyYWN0ZWRVcmwgPSB0aGlzLmV4dHJhY3RSZWFsVXJsKHVybClcclxuICAgICAgbmV3IFVSTChleHRyYWN0ZWRVcmwpXHJcbiAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9IGNhdGNoIHtcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIC8vIOWkhOeQhuefreinhumikeWIhuS6q+aWh+acrO+8jOaPkOWPluecn+WunlVSTFxyXG4gIHByaXZhdGUgc3RhdGljIGV4dHJhY3RSZWFsVXJsKGlucHV0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgLy8g5aaC5p6c5bey57uP5piv5pyJ5pWIVVJM77yM55u05o6l6L+U5ZueXHJcbiAgICB0cnkge1xyXG4gICAgICBuZXcgVVJMKGlucHV0KVxyXG4gICAgICByZXR1cm4gaW5wdXRcclxuICAgIH0gY2F0Y2gge1xyXG4gICAgICAvLyDkuI3mmK/mnInmlYhVUkzvvIzlsJ3or5Xmj5Dlj5ZcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g5aSE55CG5oqW6Z+z5YiG5Lqr5paH5pys5qC85byPXHJcbiAgICAvLyDkvovlpoI6IFwiNy45NyBEVUw6LyAwMi8wNSB6QFQueWcg5LiN55+l6YGT5ZWK6KKr5a2j6I656I655oq95LqG5LmL5ZCO5bCx6L+Z5qC35LqGIyDmsLjliqvml6Dpl7TmiYvmuLggIyDlraPojrnojrkgIyDog6HmoYMgIyBjb3MgIyDnjI7lpYcgIGh0dHBzOi8vdi5kb3V5aW4uY29tL2Q2ODlFc09BbHVnLyDlpI3liLbmraTpk77mjqXvvIzmiZPlvIBEb3Xpn7PmkJzntKLvvIznm7TmjqXop4LnnIvop4bpopHvvIFcIlxyXG4gICAgLy8g5pS56L+b55qEVVJM5q2j5YiZ6KGo6L6+5byP77yM6IO95aSf5pu05aW95Zyw5Yy56YWN5ZCE56eN5YiG5Lqr5paH5pys5Lit55qEVVJMXHJcbiAgICBjb25zdCB1cmxSZWdleCA9IC8oaHR0cHM/OlxcL1xcLyg/Ond3d1xcLik/Wy1hLXpBLVowLTlAOiUuX1xcK34jPV17MSwyNTZ9XFwuW2EtekEtWjAtOSgpXXsxLDZ9XFxiKD86Wy1hLXpBLVowLTkoKUA6JV9cXCsufiM/Jj1cXC89XSopKS9nXHJcbiAgICBjb25zdCBtYXRjaGVzID0gaW5wdXQubWF0Y2godXJsUmVnZXgpXHJcbiAgICBcclxuICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAvLyDov5Tlm57nrKzkuIDkuKrljLnphY3nmoRVUkzlubbnp7vpmaTmnKvlsL7mlpzmnaBcclxuICAgICAgcmV0dXJuIG1hdGNoZXNbMF0ucmVwbGFjZSgvXFwvJC8sICcnKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gaW5wdXRcclxuICB9XHJcblxyXG4gIC8vIOS8sOeul+aWh+S7tuWkp+Wwj++8iOWfuuS6juaXtumVv++8iVxyXG4gIHN0YXRpYyBlc3RpbWF0ZUZpbGVTaXplKGR1cmF0aW9uPzogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGlmICghZHVyYXRpb24pIHJldHVybiAwXHJcbiAgICAvLyDlgYforr7lubPlnYfnoIHnjofkuLogMU1icHNcclxuICAgIHJldHVybiBkdXJhdGlvbiAqIDEwMjQgKiAxMDI0IC8gOFxyXG4gIH1cclxuXHJcbiAgLy8g5qC85byP5YyW5paH5Lu25aSn5bCPXHJcbiAgc3RhdGljIGZvcm1hdEZpbGVTaXplKGJ5dGVzOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgaWYgKGJ5dGVzID09PSAwKSByZXR1cm4gJzAgQidcclxuICAgIFxyXG4gICAgY29uc3QgayA9IDEwMjRcclxuICAgIGNvbnN0IHNpemVzID0gWydCJywgJ0tCJywgJ01CJywgJ0dCJywgJ1RCJ11cclxuICAgIGNvbnN0IGkgPSBNYXRoLmZsb29yKE1hdGgubG9nKGJ5dGVzKSAvIE1hdGgubG9nKGspKVxyXG4gICAgXHJcbiAgICByZXR1cm4gcGFyc2VGbG9hdCgoYnl0ZXMgLyBNYXRoLnBvdyhrLCBpKSkudG9GaXhlZCgyKSkgKyAnICcgKyBzaXplc1tpXVxyXG4gIH1cclxuXHJcbiAgLy8g5qC85byP5YyW5pe26ZW/XHJcbiAgc3RhdGljIGZvcm1hdER1cmF0aW9uKHNlY29uZHM6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBjb25zdCBob3VycyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDM2MDApXHJcbiAgICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcigoc2Vjb25kcyAlIDM2MDApIC8gNjApXHJcbiAgICBjb25zdCBzZWNzID0gTWF0aC5mbG9vcihzZWNvbmRzICUgNjApXHJcbiAgICBcclxuICAgIGlmIChob3VycyA+IDApIHtcclxuICAgICAgcmV0dXJuIGAke2hvdXJzfToke21pbnV0ZXMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfToke3NlY3MudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfWBcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBgJHttaW51dGVzfToke3NlY3MudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfWBcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLy8ge3sgQVVSQTogQWRkIC0g5pm66IO96KeG6aKR5qC85byP5o6o5pat5pa55rOVIH19XHJcbiAgcHJpdmF0ZSBzdGF0aWMgaW5mZXJWaWRlb0Zvcm1hdChwcm92aWRlZEZvcm1hdDogc3RyaW5nIHwgdW5kZWZpbmVkLCB2aWRlb1VybD86IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAvLyDmlK/mjIHnmoTop4bpopHmoLzlvI/liJfooahcclxuICAgIGNvbnN0IHZhbGlkRm9ybWF0cyA9IFtcclxuICAgICAgJ21wNCcsICdhdmknLCAnbW92JywgJ3dtdicsICdmbHYnLCAnd2VibScsICdta3YnLCAnbTR2JyxcclxuICAgICAgJzNncCcsICdmNHYnLCAnYXNmJywgJ3JtJywgJ3JtdmInLCAndm9iJywgJ29ndicsICdtMnRzJywgJ210cydcclxuICAgIF07XHJcbiAgICBcclxuICAgIC8vIOmqjOivgeaPkOS+m+eahOagvOW8j1xyXG4gICAgaWYgKHByb3ZpZGVkRm9ybWF0ICYmIHZhbGlkRm9ybWF0cy5pbmNsdWRlcyhwcm92aWRlZEZvcm1hdC50b0xvd2VyQ2FzZSgpKSkge1xyXG4gICAgICByZXR1cm4gcHJvdmlkZWRGb3JtYXQudG9Mb3dlckNhc2UoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g5LuOVVJM5o6o5patXHJcbiAgICBpZiAodmlkZW9VcmwpIHtcclxuICAgICAgY29uc3QgdXJsRm9ybWF0ID0gdGhpcy5leHRyYWN0Rm9ybWF0RnJvbVVybCh2aWRlb1VybCk7XHJcbiAgICAgIGlmICh1cmxGb3JtYXQgJiYgdmFsaWRGb3JtYXRzLmluY2x1ZGVzKHVybEZvcm1hdC50b0xvd2VyQ2FzZSgpKSkge1xyXG4gICAgICAgIHJldHVybiB1cmxGb3JtYXQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDpu5jorqRtcDRcclxuICAgIHJldHVybiAnbXA0JztcclxuICB9XHJcbiAgXHJcbiAgLy8ge3sgQVVSQTogQWRkIC0g5LuOVVJM5o+Q5Y+W5qC85byP5omp5bGV5ZCNIH19XHJcbiAgcHJpdmF0ZSBzdGF0aWMgZXh0cmFjdEZvcm1hdEZyb21VcmwodXJsOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHVybE9iaiA9IG5ldyBVUkwodXJsKTtcclxuICAgICAgY29uc3QgcGF0aG5hbWUgPSB1cmxPYmoucGF0aG5hbWU7XHJcbiAgICAgIGNvbnN0IGxhc3REb3RJbmRleCA9IHBhdGhuYW1lLmxhc3RJbmRleE9mKCcuJyk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAobGFzdERvdEluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbiA9IHBhdGhuYW1lLnN1YnN0cmluZyhsYXN0RG90SW5kZXggKyAxKTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5zaW9uLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgLy8gVVJM6Kej5p6Q5aSx6LSl77yM5b+955Wl6ZSZ6K+vXHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuICBcclxuICAvLyB7eyBBVVJBOiBBZGQgLSDpqozor4Hop4bpopHmoLzlvI/mmK/lkKbmnInmlYggfX1cclxuICBwcml2YXRlIHN0YXRpYyBpc1ZhbGlkVmlkZW9Gb3JtYXQoZm9ybWF0OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IHZhbGlkRm9ybWF0cyA9IFtcclxuICAgICAgJ21wNCcsICdhdmknLCAnbW92JywgJ3dtdicsICdmbHYnLCAnd2VibScsICdta3YnLCAnbTR2JyxcclxuICAgICAgJzNncCcsICdmNHYnLCAnYXNmJywgJ3JtJywgJ3JtdmInLCAndm9iJywgJ29ndicsICdtMnRzJywgJ210cydcclxuICAgIF07XHJcbiAgICByZXR1cm4gdmFsaWRGb3JtYXRzLmluY2x1ZGVzKGZvcm1hdC50b0xvd2VyQ2FzZSgpKTtcclxuICB9XHJcbiAgXHJcbiAgLy8ge3sgQVVSQTogQWRkIC0g5Yik5pat5piv5ZCm5bqU6K+l6YeN6K+V5LiK5LygIH19XHJcbiAgcHJpdmF0ZSBzdGF0aWMgc2hvdWxkUmV0cnlVcGxvYWQoZXJyb3I6IGFueSwgYXR0ZW1wdDogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICAvLyDlpoLmnpzmmK/mnIDlkI7kuIDmrKHlsJ3or5XvvIzkuI3ph43or5VcclxuICAgIGlmIChhdHRlbXB0ID49IDUpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDmo4Dmn6XplJnor6/nsbvlnotcclxuICAgIGlmIChlcnJvcikge1xyXG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSAoZXJyb3IubWVzc2FnZSB8fCBlcnJvci50b1N0cmluZygpKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICBcclxuICAgICAgLy8g5a+55LqO572R57uc6ZSZ6K+v5aeL57uI6YeN6K+VXHJcbiAgICAgIGlmIChlcnJvck1lc3NhZ2UuaW5jbHVkZXMoJ25ldHdvcmsgZXJyb3InKSB8fFxyXG4gICAgICAgICAgZXJyb3JNZXNzYWdlLmluY2x1ZGVzKCdmZXRjaCBmYWlsZWQnKSB8fFxyXG4gICAgICAgICAgZXJyb3JNZXNzYWdlLmluY2x1ZGVzKCdlY29ubnJlc2V0JykgfHxcclxuICAgICAgICAgIGVycm9yTWVzc2FnZS5pbmNsdWRlcygndGltZW91dCcpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIOWvueS6juacjeWKoeWZqOmUmeivryg1eHgp5aeL57uI6YeN6K+VXHJcbiAgICAgIGlmIChlcnJvck1lc3NhZ2UuaW5jbHVkZXMoJzUwMCcpIHx8XHJcbiAgICAgICAgICBlcnJvck1lc3NhZ2UuaW5jbHVkZXMoJzUwMicpIHx8XHJcbiAgICAgICAgICBlcnJvck1lc3NhZ2UuaW5jbHVkZXMoJzUwMycpIHx8XHJcbiAgICAgICAgICBlcnJvck1lc3NhZ2UuaW5jbHVkZXMoJzUwNCcpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIC8vIOWvueS6juadg+mZkOmUmeivryg0MDMvNDAxKeS7heWcqOesrOS4gOasoeWwneivleaXtumHjeivlVxyXG4gICAgICBpZiAoKGVycm9yTWVzc2FnZS5pbmNsdWRlcygnNDAzJykgfHwgZXJyb3JNZXNzYWdlLmluY2x1ZGVzKCc0MDEnKSkgJiYgYXR0ZW1wdCA9PT0gMSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOm7mOiupOaDheWGteS4i++8jOWvueS6juWJjeWHoOasoeWwneivleWFgeiuuOmHjeivlVxyXG4gICAgcmV0dXJuIGF0dGVtcHQgPCAzO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsiVGFza1N0YXR1cyIsIk1lZGlhVHlwZSIsIkNsZWFudXBTZXJ2aWNlIiwiRmlsZW5hbWVTYW5pdGl6ZXIiLCJDb252ZXJzaW9uU2VydmljZSIsInBhcnNlVmlkZW8iLCJ2aWRlb1VybCIsInBhcnNlckNvbmZpZyIsInRyaW0iLCJFcnJvciIsImFwaVVybCIsImV4dHJhY3RlZFVybCIsImV4dHJhY3RSZWFsVXJsIiwiY29uc29sZSIsImxvZyIsInN1YnN0cmluZyIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXN1bHQiLCJyZXNwb25zZVRleHQiLCJ0ZXh0Iiwic3RhdHVzIiwibGVuZ3RoIiwicGFyc2UiLCJwYXJzZUVycm9yIiwiZXJyb3IiLCJzdGF0dXNUZXh0IiwiY2F0Y2giLCJ0cnVuY2F0ZWRUZXh0IiwibWVzc2FnZSIsInN1Y2Nlc3MiLCJkYXRhIiwibWVkaWFUeXBlIiwiVklERU8iLCJ1cmwiLCJVUkwiLCJJTUFHRV9BTEJVTSIsImltYWdlcyIsInRpdGxlIiwidXBsb2FkVG9XZWJEQVYiLCJtZWRpYUluZm8iLCJ3ZWJkYXZDb25maWciLCJmb2xkZXJQYXRoIiwibWF4UmV0cmllcyIsImF0dGVtcHQiLCJsYXN0RXJyb3IiLCJmaWxlTmFtZSIsImZvcm1hdCIsImluZmVyVmlkZW9Gb3JtYXQiLCJnZW5lcmF0ZUZpbGVOYW1lIiwiZ2VuZXJhdGVGb2xkZXJOYW1lIiwidW5kZWZpbmVkIiwic2hvdWxkUmV0cnlJbW1lZGlhdGVseSIsImluY2x1ZGVzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiZXJyb3JNZXNzYWdlIiwiZmlsZVBhdGgiLCJzaG91bGRSZXRyeSIsInNob3VsZFJldHJ5VXBsb2FkIiwid2FpdFRpbWUiLCJNYXRoIiwibWluIiwicG93IiwiY29udmVydFNpbmdsZSIsInRhc2siLCJvblByb2dyZXNzIiwiUEFSU0lORyIsIm5hbWUiLCJpc1ZhbGlkVXJsIiwicGFyc2VkSW5mbyIsInBhcnNlZFZpZGVvSW5mbyIsInZpZGVvVGl0bGUiLCJGQUlMRUQiLCJlcnJvck1zZyIsImNvbXBsZXRlZEF0IiwiRGF0ZSIsIlVQTE9BRElORyIsIlNVQ0NFU1MiLCJ1cGxvYWRSZXN1bHQiLCJjbGVhbnVwQWZ0ZXJUYXNrQ29tcGxldGlvbiIsImNvbnZlcnRCYXRjaCIsImJhdGNoVGFzayIsInRvdGFsVGFza3MiLCJ0YXNrcyIsImNvbXBsZXRlZFRhc2tzIiwiaSIsInVwZGF0ZWRUYXNrIiwicHJvZ3Jlc3MiLCJ0YXNrUHJvZ3Jlc3MiLCJvdmVyYWxsUHJvZ3Jlc3MiLCJzYW5pdGl6ZWRUaXRsZSIsInNhbml0aXplIiwicmVwbGFjZW1lbnQiLCJtYXhMZW5ndGgiLCJwcmVzZXJ2ZUV4dGVuc2lvbiIsImFkZFRpbWVzdGFtcCIsIm5hbWVXaXRob3V0RXh0IiwicmVwbGFjZSIsInRlc3RXZWJEQVZDb25uZWN0aW9uIiwicGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwic2VydmVyVXJsIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInRvU3RyaW5nIiwianNvbiIsInNhbml0aXplVXBsb2FkRmlsZW5hbWUiLCJmaWxlbmFtZSIsInNwZWNpYWxDaGFycyIsImRldGVjdFNwZWNpYWxDaGFycyIsImpvaW4iLCJzYW5pdGl6ZWQiLCJzYW5pdGl6ZVVwbG9hZEZpbGVuYW1lcyIsImZpbGVuYW1lcyIsInNhbml0aXplQmF0Y2giLCJ2YWxpZGF0ZUZpbGVuYW1lIiwidmFsaWRhdGlvbiIsInZhbGlkYXRlIiwiaXNWYWxpZCIsImlzc3VlcyIsImdlbmVyYXRlVGFza0lkIiwibm93IiwicmFuZG9tIiwic3Vic3RyIiwiZ2VuZXJhdGVCYXRjaElkIiwicGFyc2VWaWRlb1VybHMiLCJsaW5lcyIsInNwbGl0IiwidXJscyIsImxpbmUiLCJ0cmltbWVkIiwicHVzaCIsImlucHV0IiwidXJsUmVnZXgiLCJtYXRjaGVzIiwibWF0Y2giLCJlc3RpbWF0ZUZpbGVTaXplIiwiZHVyYXRpb24iLCJmb3JtYXRGaWxlU2l6ZSIsImJ5dGVzIiwiayIsInNpemVzIiwiZmxvb3IiLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsImZvcm1hdER1cmF0aW9uIiwic2Vjb25kcyIsImhvdXJzIiwibWludXRlcyIsInNlY3MiLCJwYWRTdGFydCIsInByb3ZpZGVkRm9ybWF0IiwidmFsaWRGb3JtYXRzIiwidG9Mb3dlckNhc2UiLCJ1cmxGb3JtYXQiLCJleHRyYWN0Rm9ybWF0RnJvbVVybCIsInVybE9iaiIsInBhdGhuYW1lIiwibGFzdERvdEluZGV4IiwibGFzdEluZGV4T2YiLCJleHRlbnNpb24iLCJlIiwiaXNWYWxpZFZpZGVvRm9ybWF0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/conversion.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/filename-sanitizer.ts":
/*!***************************************!*\
  !*** ./src/lib/filename-sanitizer.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FilenameSanitizer: () => (/* binding */ FilenameSanitizer)\n/* harmony export */ });\n/**\r\n * 文件名规范化工具\r\n * 处理文件名中的特殊符号，确保符合标准命名规范\r\n */ class FilenameSanitizer {\n    /**\r\n   * 检测文件名中是否包含特殊符号\r\n   * @param filename 文件名\r\n   * @returns 包含的特殊符号数组\r\n   */ static detectSpecialChars(filename) {\n        const specialChars = [];\n        for (const char of filename){\n            if (this.SPECIAL_CHARS.has(char)) {\n                if (!specialChars.includes(char)) {\n                    specialChars.push(char);\n                }\n            }\n        }\n        return specialChars;\n    }\n    /**\r\n   * 规范化文件名，处理特殊符号\r\n   * @param filename 原始文件名\r\n   * @param options 配置选项\r\n   * @returns 规范化后的文件名\r\n   */ static sanitize(filename) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const { replacement = '_', maxLength = 100, preserveExtension = true, addTimestamp = false, allowedCharsRegex } = options;\n        if (!filename || typeof filename !== 'string') {\n            return 'unnamed_file';\n        }\n        let sanitized = filename.trim();\n        let extension = '';\n        // {{ AURA: Modify - 分离文件扩展名 }}\n        if (preserveExtension) {\n            const lastDotIndex = sanitized.lastIndexOf('.');\n            if (lastDotIndex > 0 && lastDotIndex < sanitized.length - 1) {\n                extension = sanitized.substring(lastDotIndex);\n                sanitized = sanitized.substring(0, lastDotIndex);\n            }\n        }\n        // {{ AURA: Modify - 使用自定义正则或默认处理 }}\n        if (allowedCharsRegex) {\n            sanitized = sanitized.replace(allowedCharsRegex, replacement);\n        } else {\n            // 默认处理：移除或替换特殊字符\n            sanitized = this.replaceSpecialChars(sanitized, replacement);\n        }\n        // {{ AURA: Modify - 处理连续的替换字符 }}\n        if (replacement) {\n            const replacementRegex = new RegExp(\"\\\\\".concat(replacement, \"+\"), 'g');\n            sanitized = sanitized.replace(replacementRegex, replacement);\n        }\n        // {{ AURA: Modify - 移除开头和结尾的替换字符 }}\n        if (replacement) {\n            const trimRegex = new RegExp(\"^\\\\\".concat(replacement, \"|\\\\\").concat(replacement, \"$\"), 'g');\n            sanitized = sanitized.replace(trimRegex, '');\n        }\n        // {{ AURA: Modify - 处理空白字符 }}\n        sanitized = sanitized.replace(/\\s+/g, '_');\n        // {{ AURA: Modify - 检查是否为保留名称 }}\n        if (this.RESERVED_NAMES.has(sanitized.toUpperCase())) {\n            sanitized = sanitized + '_file';\n        }\n        // {{ AURA: Modify - 确保不为空 }}\n        if (!sanitized) {\n            sanitized = 'unnamed';\n        }\n        // {{ AURA: Modify - 限制长度（考虑扩展名） }}\n        const maxNameLength = maxLength - extension.length;\n        if (sanitized.length > maxNameLength) {\n            sanitized = sanitized.substring(0, maxNameLength);\n        }\n        // {{ AURA: Modify - 添加时间戳 }}\n        if (addTimestamp) {\n            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n            const timestampPart = \"_\".concat(timestamp);\n            const availableLength = maxNameLength - timestampPart.length;\n            if (availableLength > 0) {\n                sanitized = sanitized.substring(0, availableLength) + timestampPart;\n            }\n        }\n        return sanitized + extension;\n    }\n    /**\r\n   * 替换特殊字符\r\n   * @param text 原始文本\r\n   * @param replacement 替换字符\r\n   * @returns 处理后的文本\r\n   */ static replaceSpecialChars(text, replacement) {\n        let result = '';\n        for (const char of text){\n            if (this.SPECIAL_CHARS.has(char)) {\n                result += replacement;\n            } else {\n                result += char;\n            }\n        }\n        return result;\n    }\n    /**\r\n   * 批量处理文件名\r\n   * @param filenames 文件名数组\r\n   * @param options 配置选项\r\n   * @returns 处理后的文件名数组\r\n   */ static sanitizeBatch(filenames) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const processedNames = new Set();\n        const result = [];\n        for (const filename of filenames){\n            let sanitized = this.sanitize(filename, options);\n            // {{ AURA: Modify - 处理重名问题，添加序号 }}\n            let counter = 1;\n            let uniqueName = sanitized;\n            while(processedNames.has(uniqueName)){\n                const { name, ext } = this.splitNameAndExtension(sanitized);\n                uniqueName = \"\".concat(name, \"_\").concat(counter).concat(ext);\n                counter++;\n            }\n            processedNames.add(uniqueName);\n            result.push(uniqueName);\n        }\n        return result;\n    }\n    /**\r\n   * 分离文件名和扩展名\r\n   * @param filename 完整文件名\r\n   * @returns 分离后的名称和扩展名\r\n   */ static splitNameAndExtension(filename) {\n        const lastDotIndex = filename.lastIndexOf('.');\n        if (lastDotIndex > 0 && lastDotIndex < filename.length - 1) {\n            return {\n                name: filename.substring(0, lastDotIndex),\n                ext: filename.substring(lastDotIndex)\n            };\n        }\n        return {\n            name: filename,\n            ext: ''\n        };\n    }\n    /**\r\n   * 验证文件名是否符合规范\r\n   * @param filename 文件名\r\n   * @returns 验证结果\r\n   */ static validate(filename) {\n        const issues = [];\n        const suggestions = [];\n        if (!filename || typeof filename !== 'string') {\n            issues.push('文件名为空或无效');\n            suggestions.push('请提供有效的文件名');\n            return {\n                isValid: false,\n                issues,\n                suggestions\n            };\n        }\n        const trimmed = filename.trim();\n        if (trimmed !== filename) {\n            issues.push('文件名包含首尾空格');\n            suggestions.push('移除文件名首尾的空格');\n        }\n        const specialChars = this.detectSpecialChars(filename);\n        if (specialChars.length > 0) {\n            issues.push(\"文件名包含特殊字符: \".concat(specialChars.join(', ')));\n            suggestions.push('将特殊字符替换为下划线或其他安全字符');\n        }\n        const nameWithoutExt = this.splitNameAndExtension(filename).name;\n        if (this.RESERVED_NAMES.has(nameWithoutExt.toUpperCase())) {\n            issues.push('文件名\"'.concat(nameWithoutExt, '\"是系统保留名称'));\n            suggestions.push('更改文件名或添加后缀');\n        }\n        if (filename.length > 255) {\n            issues.push('文件名过长（超过255字符）');\n            suggestions.push('缩短文件名长度');\n        }\n        const isValid = issues.length === 0;\n        if (!isValid) {\n            suggestions.push(\"建议使用规范化后的文件名: \".concat(this.sanitize(filename)));\n        }\n        return {\n            isValid,\n            issues,\n            suggestions\n        };\n    }\n    /**\r\n   * 生成安全的文件名（用于下载和保存）\r\n   * @param originalName 原始文件名\r\n   * @param options 配置选项\r\n   * @returns 安全的文件名\r\n   */ static generateSafeFilename(originalName) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const defaultOptions = {\n            replacement: '_',\n            maxLength: 100,\n            preserveExtension: true,\n            addTimestamp: true,\n            ...options\n        };\n        return this.sanitize(originalName, defaultOptions);\n    }\n    /**\r\n   * 获取支持的文件扩展名列表\r\n   * @returns 支持的扩展名数组\r\n   */ static getSupportedExtensions() {\n        return [\n            // 视频格式\n            '.mp4',\n            '.avi',\n            '.mov',\n            '.wmv',\n            '.flv',\n            '.webm',\n            '.mkv',\n            '.m4v',\n            '.3gp',\n            '.f4v',\n            '.asf',\n            '.rm',\n            '.rmvb',\n            '.vob',\n            '.ogv',\n            '.m2ts',\n            '.mts',\n            // 图片格式\n            '.jpg',\n            '.jpeg',\n            '.png',\n            '.gif',\n            '.bmp',\n            '.webp',\n            '.svg',\n            '.ico',\n            '.tiff',\n            '.tif',\n            '.psd',\n            '.raw',\n            '.cr2',\n            '.nef',\n            '.orf',\n            '.sr2',\n            // 音频格式\n            '.mp3',\n            '.wav',\n            '.flac',\n            '.aac',\n            '.ogg',\n            '.wma',\n            '.m4a',\n            '.opus'\n        ];\n    }\n}\n// {{ AURA: Add - 定义需要处理的特殊符号集合 }}\nFilenameSanitizer.SPECIAL_CHARS = new Set([\n    '#',\n    '%',\n    '&',\n    '@',\n    '!',\n    '*',\n    '(',\n    ')',\n    '[',\n    ']',\n    '{',\n    '}',\n    '|',\n    '\\\\',\n    ':',\n    ';',\n    '\"',\n    \"'\",\n    '<',\n    '>',\n    '?',\n    '/',\n    '\\x00',\n    '\\x01',\n    '\\x02',\n    '\\x03',\n    '\\x04',\n    '\\x05',\n    '\\x06',\n    '\\x07',\n    '\\x08',\n    '\\x09',\n    '\\x0A',\n    '\\x0B',\n    '\\x0C',\n    '\\x0D',\n    '\\x0E',\n    '\\x0F',\n    '\\x10',\n    '\\x11',\n    '\\x12',\n    '\\x13',\n    '\\x14',\n    '\\x15',\n    '\\x16',\n    '\\x17',\n    '\\x18',\n    '\\x19',\n    '\\x1A',\n    '\\x1B',\n    '\\x1C',\n    '\\x1D',\n    '\\x1E',\n    '\\x1F'\n]);\n// {{ AURA: Add - Windows系统保留文件名 }}\nFilenameSanitizer.RESERVED_NAMES = new Set([\n    'CON',\n    'PRN',\n    'AUX',\n    'NUL',\n    'COM1',\n    'COM2',\n    'COM3',\n    'COM4',\n    'COM5',\n    'COM6',\n    'COM7',\n    'COM8',\n    'COM9',\n    'LPT1',\n    'LPT2',\n    'LPT3',\n    'LPT4',\n    'LPT5',\n    'LPT6',\n    'LPT7',\n    'LPT8',\n    'LPT9'\n]);\n// {{ AURA: Add - 默认非法字符正则表达式 }}\nFilenameSanitizer.DEFAULT_ILLEGAL_CHARS_REGEX = /[<>:\"/\\\\|?*\\x00-\\x1F]/g;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/filename-sanitizer.ts\n"));

/***/ })

});