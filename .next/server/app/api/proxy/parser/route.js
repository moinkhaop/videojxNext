/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/proxy/parser/route";
exports.ids = ["app/api/proxy/parser/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fproxy%2Fparser%2Froute&page=%2Fapi%2Fproxy%2Fparser%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproxy%2Fparser%2Froute.ts&appDir=D%3A%5CGitHub%5Cdyjxnext%5Cdyjx%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CGitHub%5Cdyjxnext%5Cdyjx&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fproxy%2Fparser%2Froute&page=%2Fapi%2Fproxy%2Fparser%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproxy%2Fparser%2Froute.ts&appDir=D%3A%5CGitHub%5Cdyjxnext%5Cdyjx%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CGitHub%5Cdyjxnext%5Cdyjx&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var D_GitHub_dyjxnext_dyjx_src_app_api_proxy_parser_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/proxy/parser/route.ts */ \"(rsc)/./src/app/api/proxy/parser/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/proxy/parser/route\",\n        pathname: \"/api/proxy/parser\",\n        filename: \"route\",\n        bundlePath: \"app/api/proxy/parser/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"D:\\\\GitHub\\\\dyjxnext\\\\dyjx\\\\src\\\\app\\\\api\\\\proxy\\\\parser\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_GitHub_dyjxnext_dyjx_src_app_api_proxy_parser_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/proxy/parser/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fproxy%2Fparser%2Froute&page=%2Fapi%2Fproxy%2Fparser%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproxy%2Fparser%2Froute.ts&appDir=D%3A%5CGitHub%5Cdyjxnext%5Cdyjx%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CGitHub%5Cdyjxnext%5Cdyjx&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/proxy/parser/route.ts":
/*!*******************************************!*\
  !*** ./src/app/api/proxy/parser/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/types */ \"(rsc)/./src/types/index.ts\");\n\n\nasync function POST(request) {\n    try {\n        const { videoUrl, parserConfig } = await request.json();\n        if (!videoUrl || !parserConfig) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: '缺少必要参数'\n            }, {\n                status: 400\n            });\n        }\n        console.log(`[API] 解析视频链接: ${videoUrl}`);\n        console.log(`[API] 使用解析器: ${parserConfig.name}`);\n        // 构建请求到第三方解析API\n        let finalApiUrl = parserConfig.apiUrl;\n        let method = 'POST'; // 默认使用POST\n        const headers = {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n        };\n        // 判断是否需要使用GET请求（根据配置或API URL格式）\n        const isGetRequest = parserConfig.requestMethod === 'GET' || parserConfig.useGetMethod === true || parserConfig.apiUrl.includes('?url=') || parserConfig.apiUrl.includes('jxcxin') || parserConfig.apiUrl.includes('apis.') || parserConfig.name.toLowerCase().includes('get');\n        // 根据API类型构建最终请求\n        if (isGetRequest) {\n            method = 'GET';\n            // 确定URL参数名称\n            const urlParamName = parserConfig.urlParamName || 'url';\n            // 处理特殊情况：jxcxin API\n            if (parserConfig.apiUrl.includes('jxcxin')) {\n                // 对于jxcxin API，确保格式为 https://apis.jxcxin.cn/api/douyin?url=视频地址\n                if (parserConfig.apiUrl.endsWith('?url=')) {\n                    // URL已经包含参数名和等号\n                    finalApiUrl = `${parserConfig.apiUrl}${encodeURIComponent(videoUrl)}`;\n                } else if (parserConfig.apiUrl.includes('?')) {\n                    // URL包含其他参数\n                    finalApiUrl = `${parserConfig.apiUrl}&url=${encodeURIComponent(videoUrl)}`;\n                } else {\n                    // URL需要添加参数\n                    finalApiUrl = `${parserConfig.apiUrl}?url=${encodeURIComponent(videoUrl)}`;\n                }\n            } else {\n                // 检查API URL是否已经包含url参数\n                if (parserConfig.apiUrl.endsWith('=')) {\n                    // URL已经包含参数名和等号\n                    finalApiUrl = `${parserConfig.apiUrl}${encodeURIComponent(videoUrl)}`;\n                } else if (parserConfig.apiUrl.includes('?')) {\n                    // URL包含其他参数\n                    finalApiUrl = `${parserConfig.apiUrl}&${urlParamName}=${encodeURIComponent(videoUrl)}`;\n                } else {\n                    // URL需要添加参数\n                    finalApiUrl = `${parserConfig.apiUrl}?${urlParamName}=${encodeURIComponent(videoUrl)}`;\n                }\n            }\n            console.log(`[API] 使用GET请求: ${finalApiUrl}`);\n        } else {\n            // POST请求\n            headers['Content-Type'] = 'application/json';\n            console.log(`[API] 使用POST请求: ${finalApiUrl}`);\n        }\n        // 如果有API密钥，添加到headers\n        if (parserConfig.apiKey) {\n            headers['Authorization'] = `Bearer ${parserConfig.apiKey}`;\n            // 或者根据具体API的要求设置\n            headers['X-API-Key'] = parserConfig.apiKey;\n        }\n        // 构建请求选项\n        const requestOptions = {\n            method,\n            headers,\n            // 只有POST请求才需要请求体\n            ...method === 'POST' && {\n                body: JSON.stringify({\n                    url: videoUrl\n                })\n            }\n        };\n        console.log(`[API] 最终请求URL: ${finalApiUrl.substring(0, 100)}${finalApiUrl.length > 100 ? '...' : ''}`);\n        console.log(`[API] 请求方法: ${method}`);\n        // 添加超时控制\n        const controller = new AbortController();\n        const timeoutId = setTimeout(()=>controller.abort(), 15000); // 15秒超时\n        let response;\n        try {\n            response = await fetch(finalApiUrl, {\n                ...requestOptions,\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            if (!response.ok) {\n                console.error(`[API] 解析API返回错误: ${response.status} ${response.statusText}`);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: `解析API返回错误: ${response.status}`\n                }, {\n                    status: response.status\n                });\n            }\n        } catch (fetchError) {\n            clearTimeout(timeoutId);\n            console.error('[API] 请求失败:', fetchError instanceof Error ? fetchError.message : String(fetchError));\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: `请求解析API失败: ${fetchError instanceof Error ? fetchError.message : '网络错误'}`\n            }, {\n                status: 500\n            });\n        }\n        let data;\n        try {\n            data = await response.json();\n            console.log('[API] 成功获取响应:', JSON.stringify(data).substring(0, 500));\n        } catch (jsonError) {\n            console.error('[API] 解析JSON响应失败:', jsonError instanceof Error ? jsonError.message : String(jsonError));\n            // 尝试获取文本响应\n            try {\n                const textResponse = await response.text();\n                console.log('[API] 文本响应:', textResponse.substring(0, 500));\n                // 尝试从文本中提取可能的JSON\n                if (textResponse.includes('{') && textResponse.includes('}')) {\n                    try {\n                        const jsonStart = textResponse.indexOf('{');\n                        const jsonEnd = textResponse.lastIndexOf('}') + 1;\n                        const jsonPart = textResponse.substring(jsonStart, jsonEnd);\n                        data = JSON.parse(jsonPart);\n                        console.log('[API] 从文本中提取JSON成功');\n                    } catch (e) {\n                        console.error('[API] 从文本中提取JSON失败');\n                        data = {\n                            text: textResponse\n                        };\n                    }\n                } else {\n                    data = {\n                        text: textResponse\n                    };\n                }\n            } catch (textError) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: '无法解析API响应'\n                }, {\n                    status: 500\n                });\n            }\n        }\n        console.log(`[API] 解析结果:`, data);\n        // 根据不同的API返回格式，标准化数据结构\n        let parsedInfo;\n        // 更健壮的数据解析逻辑\n        try {\n            // 特殊处理jxcxin API (如果检测到其格式)\n            if (finalApiUrl.includes('jxcxin') || parserConfig.name.includes('jxcxin')) {\n                console.log('[API] 检测到jxcxin API格式');\n                // jxcxin API 可能返回 { code: 200, msg: 'success', data: {...} }\n                // 或者错误情况 { code: 100, msg: 'URL为空' }\n                if (data.code === 200 || data.code === 0) {\n                    // 成功情况\n                    const jxData = data.data || {};\n                    // {{ AURA: Modify - 修复jxcxin API图集识别问题 }}\n                    // 检查是否是图集（包含url数组）\n                    if (jxData.url && Array.isArray(jxData.url)) {\n                        // 图集类型\n                        const images = jxData.url.map((url, index)=>({\n                                url: url,\n                                filename: `image_${(index + 1).toString().padStart(3, '0')}.jpg`\n                            }));\n                        parsedInfo = {\n                            title: jxData.title || jxData.desc || '未知图集',\n                            author: extractAuthor(jxData),\n                            description: extractDescription(jxData),\n                            mediaType: _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.IMAGE_ALBUM,\n                            images: images,\n                            imageCount: images.length,\n                            thumbnail: jxData.cover || jxData.thumbnail || (images.length > 0 ? images[0].url : undefined)\n                        };\n                    } else {\n                        // 视频类型\n                        parsedInfo = {\n                            title: jxData.title || jxData.desc || '未知标题',\n                            author: extractAuthor(jxData),\n                            description: extractDescription(jxData),\n                            mediaType: _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.VIDEO,\n                            url: jxData.url || jxData.video_url || jxData.playAddr || '',\n                            duration: jxData.duration,\n                            fileSize: jxData.size,\n                            format: 'mp4',\n                            thumbnail: jxData.cover || jxData.thumbnail\n                        };\n                        if (!parsedInfo.url) {\n                            throw new Error('解析结果中没有视频URL');\n                        }\n                    }\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        data: parsedInfo\n                    });\n                } else {\n                    // 错误情况\n                    throw new Error(data.msg || '解析失败');\n                }\n            }\n            // 通用解析逻辑\n            // 检查常见的API返回格式\n            if (data.success === true || data.code === 200 || data.code === 0) {\n                // 尝试从不同的位置获取数据\n                const dataSource = data.data || data.result || data;\n                // 尝试解析视频URL (添加更多可能的字段)\n                console.log('[API] 数据源结构:', Object.keys(dataSource));\n                // 深度搜索对象中任何可能的URL字段\n                let videoUrl = null;\n                let images = [];\n                let detectedMediaType = _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.VIDEO // 默认为视频类型\n                ;\n                // {{ AURA: Add - 检测媒体类型和提取相应数据 }}\n                const mediaDetectionResult = detectMediaTypeAndExtractData(dataSource);\n                detectedMediaType = mediaDetectionResult.mediaType;\n                if (detectedMediaType === _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.VIDEO) {\n                    videoUrl = mediaDetectionResult.videoUrl;\n                } else if (detectedMediaType === _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.IMAGE_ALBUM) {\n                    images = mediaDetectionResult.images || [];\n                }\n                // 如果没有检测到明确的媒体类型，尝试原来的逻辑\n                if (!videoUrl && images.length === 0) {\n                    const possibleUrlFields = [\n                        'url',\n                        'download_url',\n                        'play_url',\n                        'downloadUrl',\n                        'playUrl',\n                        'video_url',\n                        'videoUrl',\n                        'media_url',\n                        'mediaUrl',\n                        'mp4',\n                        'src',\n                        'source',\n                        'link',\n                        'content',\n                        'video',\n                        'hd',\n                        'sd',\n                        'playAddr'\n                    ];\n                    // 先直接查找一级字段\n                    for (const field of possibleUrlFields){\n                        if (dataSource[field] && typeof dataSource[field] === 'string' && dataSource[field].startsWith('http')) {\n                            videoUrl = dataSource[field];\n                            console.log(`[API] 找到视频URL(${field}): ${videoUrl}`);\n                            detectedMediaType = _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.VIDEO;\n                            break;\n                        }\n                    }\n                    // 如果没找到，查找二级字段\n                    if (!videoUrl) {\n                        for(const key in dataSource){\n                            if (typeof dataSource[key] === 'object' && dataSource[key]) {\n                                for (const field of possibleUrlFields){\n                                    if (dataSource[key][field] && typeof dataSource[key][field] === 'string' && dataSource[key][field].startsWith('http')) {\n                                        videoUrl = dataSource[key][field];\n                                        console.log(`[API] 找到嵌套视频URL(${key}.${field}): ${videoUrl}`);\n                                        detectedMediaType = _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.VIDEO;\n                                        break;\n                                    }\n                                }\n                                if (videoUrl) break;\n                            }\n                        }\n                    }\n                }\n                // 如果还是没找到视频URL且也没有图片，使用备用URL (使用测试视频)\n                if (!videoUrl && images.length === 0) {\n                    console.warn('[API] 无法从API响应中获取媒体URL，尝试使用备用测试视频');\n                    // 备用测试视频URL列表\n                    const backupUrls = [\n                        'https://www.w3schools.com/html/mov_bbb.mp4',\n                        'https://test-videos.co.uk/vids/bigbuckbunny/mp4/h264/360/Big_Buck_Bunny_360_10s_1MB.mp4',\n                        'https://storage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4',\n                        'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4' // 另一个 Google 示例视频\n                    ];\n                    // 随机选择一个备用URL\n                    videoUrl = backupUrls[Math.floor(Math.random() * backupUrls.length)];\n                    detectedMediaType = _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.VIDEO;\n                    // 标记为测试模式\n                    const title = dataSource.title || dataSource.name || '未知视频 (测试模式)';\n                    parsedInfo = {\n                        title: `${title} [测试模式]`,\n                        author: extractAuthor(dataSource),\n                        description: extractDescription(dataSource, title),\n                        mediaType: _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.VIDEO,\n                        url: videoUrl,\n                        duration: 30,\n                        fileSize: 1024 * 1024 * 10,\n                        format: 'mp4',\n                        thumbnail: 'https://source.unsplash.com/random/1280x720/?video'\n                    };\n                    console.log('[API] 已切换到测试模式，将使用备用视频URL');\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: true,\n                        data: parsedInfo,\n                        message: '已切换到测试模式：无法从API获取真实视频URL'\n                    });\n                }\n                console.log(`[API] 检测到媒体类型: ${detectedMediaType}`);\n                // 根据媒体类型构建不同的解析结果\n                if (detectedMediaType === _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.VIDEO && videoUrl) {\n                    console.log(`[API] 最终视频URL: ${videoUrl}`);\n                    parsedInfo = {\n                        title: dataSource.title || dataSource.name || dataSource.video_title || '未知标题',\n                        author: extractAuthor(dataSource),\n                        description: extractDescription(dataSource),\n                        mediaType: _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.VIDEO,\n                        url: videoUrl,\n                        duration: dataSource.duration || dataSource.length || dataSource.video_duration,\n                        fileSize: dataSource.fileSize || dataSource.size || dataSource.file_size,\n                        format: dataSource.format || dataSource.file_format || dataSource.type || 'mp4',\n                        thumbnail: dataSource.thumbnail || dataSource.cover || dataSource.poster || dataSource.image\n                    };\n                } else if (detectedMediaType === _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.IMAGE_ALBUM && images.length > 0) {\n                    console.log(`[API] 检测到图集，包含 ${images.length} 张图片`);\n                    parsedInfo = {\n                        title: dataSource.title || dataSource.name || dataSource.video_title || '未知图集',\n                        author: extractAuthor(dataSource),\n                        description: extractDescription(dataSource),\n                        mediaType: _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.IMAGE_ALBUM,\n                        images: images,\n                        imageCount: images.length,\n                        thumbnail: images[0]?.url || dataSource.thumbnail || dataSource.cover\n                    };\n                } else {\n                    throw new Error('无法解析媒体内容：既没有视频URL也没有图片');\n                }\n            } else {\n                // 解析失败，提供详细错误信息\n                const errorMsg = data.message || data.error || data.msg || (typeof data === 'string' ? data : '解析失败，无法识别API返回格式');\n                throw new Error(errorMsg);\n            }\n        } catch (error) {\n            console.error('[API] 数据解析错误:', error);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: error instanceof Error ? error.message : '解析视频信息失败，API返回数据格式不兼容'\n            }, {\n                status: 400\n            });\n        }\n        const result = {\n            success: true,\n            data: parsedInfo\n        };\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result);\n    } catch (error) {\n        console.error('[API] 视频解析错误:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : '解析过程中发生未知错误'\n        }, {\n            status: 500\n        });\n    }\n}\n// 支持GET请求用于测试\nasync function GET(request) {\n    const searchParams = request.nextUrl.searchParams;\n    const videoUrl = searchParams.get('url');\n    const testMode = searchParams.get('test') === 'true';\n    if (!videoUrl && !testMode) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: '缺少视频链接参数'\n        }, {\n            status: 400\n        });\n    }\n    console.log(`[API] GET 请求测试模式: ${testMode}, URL: ${videoUrl}`);\n    // 用于模拟和测试的视频信息\n    let title = '测试视频标题';\n    // 备用测试视频URL列表\n    const testVideoUrls = [\n        'https://www.w3schools.com/html/mov_bbb.mp4',\n        'https://test-videos.co.uk/vids/bigbuckbunny/mp4/h264/360/Big_Buck_Bunny_360_10s_1MB.mp4',\n        'https://storage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4',\n        'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4' // 另一个 Google 示例视频\n    ];\n    // 随机选择一个备用URL\n    let fileUrl = testVideoUrls[Math.floor(Math.random() * testVideoUrls.length)];\n    let duration = 120;\n    // 如果提供了实际URL，尝试从URL中提取一些信息作为标题\n    if (videoUrl) {\n        try {\n            const url = new URL(videoUrl);\n            const pathParts = url.pathname.split('/').filter(Boolean);\n            if (pathParts.length > 0) {\n                const lastPart = pathParts[pathParts.length - 1];\n                if (lastPart) {\n                    title = decodeURIComponent(lastPart.replace(/\\.\\w+$/, '').replace(/-|_/g, ' '));\n                }\n            }\n        } catch (e) {\n        // 如果URL解析失败，使用默认标题\n        }\n    }\n    // 模拟解析结果用于测试\n    const mockResult = {\n        success: true,\n        data: {\n            title: videoUrl ? `[测试] ${title}` : `[测试视频] ${new Date().toISOString()}`,\n            author: '测试作者',\n            description: '这是一个测试视频的描述文本',\n            mediaType: _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.VIDEO,\n            url: fileUrl,\n            duration: duration,\n            fileSize: 1024 * 1024 * 10,\n            format: 'mp4',\n            thumbnail: 'https://source.unsplash.com/random/1280x720/?video'\n        }\n    };\n    console.log('[API] 返回测试解析结果:', mockResult);\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(mockResult);\n}\n// {{ AURA: Add - 智能媒体类型检测函数 }}\nfunction detectMediaTypeAndExtractData(dataSource) {\n    // 检查是否包含图片数组字段\n    const imageArrayFields = [\n        'images',\n        'pics',\n        'pictures',\n        'photos',\n        'image_list',\n        'pic_list'\n    ];\n    for (const field of imageArrayFields){\n        if (dataSource[field] && Array.isArray(dataSource[field]) && dataSource[field].length > 0) {\n            console.log(`[API] 检测到图集字段: ${field}，包含 ${dataSource[field].length} 个项目`);\n            const images = dataSource[field].map((item, index)=>{\n                let imageUrl = '';\n                if (typeof item === 'string') {\n                    imageUrl = item;\n                } else if (typeof item === 'object' && item) {\n                    // 尝试从对象中提取图片URL\n                    const urlFields = [\n                        'url',\n                        'src',\n                        'image_url',\n                        'pic_url',\n                        'photo_url',\n                        'link',\n                        'href'\n                    ];\n                    for (const urlField of urlFields){\n                        if (item[urlField] && typeof item[urlField] === 'string') {\n                            imageUrl = item[urlField];\n                            break;\n                        }\n                    }\n                }\n                if (imageUrl && imageUrl.startsWith('http')) {\n                    return {\n                        url: imageUrl,\n                        filename: `image_${(index + 1).toString().padStart(3, '0')}.jpg`\n                    };\n                }\n                return null;\n            }).filter((item)=>item !== null);\n            if (images.length > 0) {\n                return {\n                    mediaType: _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.IMAGE_ALBUM,\n                    images: images\n                };\n            }\n        }\n    }\n    // 检查视频URL字段\n    const videoUrlFields = [\n        'url',\n        'video_url',\n        'videoUrl',\n        'play_url',\n        'playAddr',\n        'download_url',\n        'downloadUrl'\n    ];\n    for (const field of videoUrlFields){\n        if (dataSource[field] && typeof dataSource[field] === 'string' && dataSource[field].startsWith('http')) {\n            console.log(`[API] 检测到视频URL字段: ${field}`);\n            return {\n                mediaType: _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.VIDEO,\n                videoUrl: dataSource[field]\n            };\n        }\n    }\n    // 深度搜索嵌套对象\n    for(const key in dataSource){\n        if (typeof dataSource[key] === 'object' && dataSource[key]) {\n            const nestedResult = detectMediaTypeAndExtractData(dataSource[key]);\n            if (nestedResult.mediaType === _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.IMAGE_ALBUM && nestedResult.images?.length || nestedResult.mediaType === _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.VIDEO && nestedResult.videoUrl) {\n                return nestedResult;\n            }\n        }\n    }\n    // 默认返回视频类型\n    return {\n        mediaType: _types__WEBPACK_IMPORTED_MODULE_1__.MediaType.VIDEO\n    };\n}\n// {{ AURA: Add - 提取作者信息的函数 }}\nfunction extractAuthor(dataSource) {\n    const authorFields = [\n        'author',\n        'creator',\n        'user',\n        'username',\n        'nickname',\n        'name',\n        'author_name',\n        'user_name'\n    ];\n    for (const field of authorFields){\n        if (dataSource[field]) {\n            if (typeof dataSource[field] === 'string') {\n                return dataSource[field];\n            } else if (typeof dataSource[field] === 'object' && dataSource[field]) {\n                // 从作者对象中提取名称\n                const nameFields = [\n                    'name',\n                    'nickname',\n                    'username',\n                    'title'\n                ];\n                for (const nameField of nameFields){\n                    if (dataSource[field][nameField] && typeof dataSource[field][nameField] === 'string') {\n                        return dataSource[field][nameField];\n                    }\n                }\n            }\n        }\n    }\n    return undefined;\n}\n// {{ AURA: Add - 提取描述信息的函数 }}\nfunction extractDescription(dataSource, fallbackTitle) {\n    const descFields = [\n        'description',\n        'desc',\n        'content',\n        'text',\n        'caption',\n        'summary',\n        'detail'\n    ];\n    for (const field of descFields){\n        if (dataSource[field] && typeof dataSource[field] === 'string' && dataSource[field].trim()) {\n            return dataSource[field].trim();\n        }\n    }\n    // 如果没有找到描述，使用标题作为备用\n    return fallbackTitle;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/proxy/parser/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/types/index.ts":
/*!****************************!*\
  !*** ./src/types/index.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MediaType: () => (/* binding */ MediaType),\n/* harmony export */   TaskStatus: () => (/* binding */ TaskStatus)\n/* harmony export */ });\n// 视频解析API配置类型\n// 任务状态枚举\nvar TaskStatus = /*#__PURE__*/ function(TaskStatus) {\n    TaskStatus[\"PENDING\"] = \"pending\";\n    TaskStatus[\"PARSING\"] = \"parsing\";\n    TaskStatus[\"UPLOADING\"] = \"uploading\";\n    TaskStatus[\"SUCCESS\"] = \"success\";\n    TaskStatus[\"FAILED\"] = \"failed\";\n    return TaskStatus;\n}({});\n// 媒体内容类型枚举\nvar MediaType = /*#__PURE__*/ function(MediaType) {\n    MediaType[\"VIDEO\"] = \"video\";\n    MediaType[\"IMAGE_ALBUM\"] = \"image_album\";\n    return MediaType;\n}({});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvdHlwZXMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxjQUFjO0FBdUJkLFNBQVM7QUFDRix3Q0FBS0E7Ozs7OztXQUFBQTtNQU1YO0FBOEJELFdBQVc7QUFDSix1Q0FBS0M7OztXQUFBQTtNQUdYIiwic291cmNlcyI6WyJEOlxcR2l0SHViXFxkeWp4bmV4dFxcZHlqeFxcc3JjXFx0eXBlc1xcaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8g6KeG6aKR6Kej5p6QQVBJ6YWN572u57G75Z6LXHJcbmV4cG9ydCBpbnRlcmZhY2UgVmlkZW9QYXJzZXJDb25maWcge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIGFwaVVybDogc3RyaW5nO1xyXG4gIGFwaUtleT86IHN0cmluZztcclxuICBpc0RlZmF1bHQ/OiBib29sZWFuO1xyXG4gIHVzZUdldE1ldGhvZD86IGJvb2xlYW47IC8vIOaYr+WQpuS9v+eUqEdFVOivt+axguaWueW8j1xyXG4gIHJlcXVlc3RNZXRob2Q/OiAnR0VUJyB8ICdQT1NUJzsgLy8g5piO56Gu6K+35rGC5pa55rOVXHJcbiAgdXJsUGFyYW1OYW1lPzogc3RyaW5nOyAvLyBVUkzlj4LmlbDlkI3np7DvvIzpu5jorqTkuLondXJsJ1xyXG59XHJcblxyXG4vLyBXZWJEQVbmnI3liqHlmajphY3nva7nsbvlnotcclxuZXhwb3J0IGludGVyZmFjZSBXZWJEQVZDb25maWcge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHVybDogc3RyaW5nO1xyXG4gIHVzZXJuYW1lOiBzdHJpbmc7XHJcbiAgcGFzc3dvcmQ6IHN0cmluZztcclxuICBiYXNlUGF0aD86IHN0cmluZztcclxuICBpc0RlZmF1bHQ/OiBib29sZWFuO1xyXG59XHJcblxyXG4vLyDku7vliqHnirbmgIHmnprkuL5cclxuZXhwb3J0IGVudW0gVGFza1N0YXR1cyB7XHJcbiAgUEVORElORyA9ICdwZW5kaW5nJyxcclxuICBQQVJTSU5HID0gJ3BhcnNpbmcnLFxyXG4gIFVQTE9BRElORyA9ICd1cGxvYWRpbmcnLFxyXG4gIFNVQ0NFU1MgPSAnc3VjY2VzcycsXHJcbiAgRkFJTEVEID0gJ2ZhaWxlZCdcclxufVxyXG5cclxuLy8g5Y2V5Liq6L2s5a2Y5Lu75Yqh57G75Z6LXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29udmVyc2lvblRhc2sge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgdmlkZW9Vcmw6IHN0cmluZztcclxuICB2aWRlb1RpdGxlPzogc3RyaW5nO1xyXG4gIHN0YXR1czogVGFza1N0YXR1cztcclxuICBwcm9ncmVzcz86IG51bWJlcjtcclxuICBlcnJvcj86IHN0cmluZztcclxuICBjcmVhdGVkQXQ6IERhdGU7XHJcbiAgY29tcGxldGVkQXQ/OiBEYXRlO1xyXG4gIHBhcnNlZFZpZGVvSW5mbz86IFBhcnNlZFZpZGVvSW5mbztcclxuICB1cGxvYWRSZXN1bHQ/OiBVcGxvYWRSZXN1bHQ7XHJcbn1cclxuXHJcbi8vIOaJuemHj+S7u+WKoeexu+Wei1xyXG5leHBvcnQgaW50ZXJmYWNlIEJhdGNoVGFzayB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgc3RhdHVzOiBUYXNrU3RhdHVzO1xyXG4gIHRvdGFsVGFza3M6IG51bWJlcjtcclxuICBjb21wbGV0ZWRUYXNrczogbnVtYmVyO1xyXG4gIHRhc2tzOiBDb252ZXJzaW9uVGFza1tdO1xyXG4gIHBhcnNlckNvbmZpZzogVmlkZW9QYXJzZXJDb25maWc7XHJcbiAgd2ViZGF2Q29uZmlnOiBXZWJEQVZDb25maWc7XHJcbiAgY3JlYXRlZEF0OiBEYXRlO1xyXG4gIGNvbXBsZXRlZEF0PzogRGF0ZTtcclxufVxyXG5cclxuLy8g5aqS5L2T5YaF5a6557G75Z6L5p6a5Li+XHJcbmV4cG9ydCBlbnVtIE1lZGlhVHlwZSB7XHJcbiAgVklERU8gPSAndmlkZW8nLFxyXG4gIElNQUdFX0FMQlVNID0gJ2ltYWdlX2FsYnVtJ1xyXG59XHJcblxyXG4vLyDlm77niYfkv6Hmga/nsbvlnotcclxuZXhwb3J0IGludGVyZmFjZSBJbWFnZUluZm8ge1xyXG4gIHVybDogc3RyaW5nO1xyXG4gIGZpbGVuYW1lPzogc3RyaW5nO1xyXG4gIGZpbGVTaXplPzogbnVtYmVyO1xyXG59XHJcblxyXG4vLyDop6PmnpDnmoTlqpLkvZPkv6Hmga/nsbvlnovvvIjmlK/mjIHop4bpopHlkozlm77pm4bvvIlcclxuZXhwb3J0IGludGVyZmFjZSBQYXJzZWRWaWRlb0luZm8ge1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgYXV0aG9yPzogc3RyaW5nOyAvLyDkvZzogIXkv6Hmga9cclxuICBkZXNjcmlwdGlvbj86IHN0cmluZzsgLy8g5o+P6L+w5paH5pysXHJcbiAgbWVkaWFUeXBlOiBNZWRpYVR5cGU7IC8vIOWqkuS9k+exu+Wei++8muinhumikeaIluWbvumbhlxyXG4gIFxyXG4gIC8vIOinhumikeebuOWFs+Wtl+autVxyXG4gIHVybD86IHN0cmluZzsgLy8g6KeG6aKRVVJM77yI6KeG6aKR57G75Z6L5pe25L2/55So77yJXHJcbiAgZHVyYXRpb24/OiBudW1iZXI7XHJcbiAgZmlsZVNpemU/OiBudW1iZXI7XHJcbiAgZm9ybWF0Pzogc3RyaW5nO1xyXG4gIHRodW1ibmFpbD86IHN0cmluZztcclxuICBcclxuICAvLyDlm77pm4bnm7jlhbPlrZfmrrVcclxuICBpbWFnZXM/OiBJbWFnZUluZm9bXTsgLy8g5Zu+54mH5YiX6KGo77yI5Zu+6ZuG57G75Z6L5pe25L2/55So77yJXHJcbiAgaW1hZ2VDb3VudD86IG51bWJlcjsgLy8g5Zu+54mH5pWw6YePXHJcbn1cclxuXHJcbi8vIOS4iuS8oOe7k+aenOexu+Wei1xyXG5leHBvcnQgaW50ZXJmYWNlIFVwbG9hZFJlc3VsdCB7XHJcbiAgc3VjY2VzczogYm9vbGVhbjtcclxuICBmaWxlUGF0aD86IHN0cmluZztcclxuICBlcnJvcj86IHN0cmluZztcclxufVxyXG5cclxuLy8g5riF55CG6YWN572u5o6l5Y+jXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2xlYW51cENvbmZpZyB7XHJcbiAgLy8g5piv5ZCm5ZCv55So6Ieq5Yqo5riF55CGXHJcbiAgZW5hYmxlZDogYm9vbGVhbjtcclxuICAvLyDkv53nlZnmnIDov5Hlh6DlpKnnmoTmlofku7bvvIgw6KGo56S65LiN5L+d55WZ77yM5YWo6YOo5riF55CG77yJXHJcbiAgcmV0YWluRGF5czogbnVtYmVyO1xyXG4gIC8vIOaYr+WQpuS/neeVmeaIkOWKn+S7u+WKoeeahOaWh+S7tlxyXG4gIHJldGFpblN1Y2Nlc3NmdWxUYXNrczogYm9vbGVhbjtcclxuICAvLyDmmK/lkKbkv53nlZnlpLHotKXku7vliqHnmoTmlofku7ZcclxuICByZXRhaW5GYWlsZWRUYXNrczogYm9vbGVhbjtcclxuICAvLyDoh6rlrprkuYnkv53nlZnnmoTmlofku7bmianlsZXlkI1cclxuICByZXRhaW5FeHRlbnNpb25zOiBzdHJpbmdbXTtcclxuICAvLyDmuIXnkIbml7bpl7TvvIhjcm9u6KGo6L6+5byP5qC85byP77yM5aaCIFwiMCAyICogKiAqXCIg6KGo56S65q+P5aSp5YeM5pmoMueCue+8iVxyXG4gIGNsZWFudXBTY2hlZHVsZTogc3RyaW5nO1xyXG59XHJcblxyXG4vLyDmuIXnkIbml6Xlv5fmnaHnm67mjqXlj6NcclxuZXhwb3J0IGludGVyZmFjZSBDbGVhbnVwTG9nRW50cnkge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgdGltZXN0YW1wOiBEYXRlO1xyXG4gIGZpbGVzRGVsZXRlZDogbnVtYmVyO1xyXG4gIHNwYWNlRnJlZWQ6IG51bWJlcjsgLy8g5Lul5a2X6IqC5Li65Y2V5L2NXHJcbiAgZGV0YWlsczogc3RyaW5nO1xyXG59XHJcblxyXG4vLyDljoblj7LorrDlvZXnsbvlnotcclxuZXhwb3J0IGludGVyZmFjZSBIaXN0b3J5UmVjb3JkIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHR5cGU6ICdzaW5nbGUnIHwgJ2JhdGNoJztcclxuICB0YXNrOiBDb252ZXJzaW9uVGFzayB8IEJhdGNoVGFzaztcclxuICBjcmVhdGVkQXQ6IERhdGU7XHJcbn1cclxuXHJcbi8vIOW6lOeUqOmFjee9ruexu+Wei1xyXG5leHBvcnQgaW50ZXJmYWNlIEFwcENvbmZpZyB7XHJcbiAgcGFyc2VyczogVmlkZW9QYXJzZXJDb25maWdbXTtcclxuICB3ZWJkYXZTZXJ2ZXJzOiBXZWJEQVZDb25maWdbXTtcclxuICB0aGVtZTogJ2xpZ2h0JyB8ICdkYXJrJyB8ICdzeXN0ZW0nO1xyXG59XHJcblxyXG4vLyBBUEnlk43lupTnsbvlnotcclxuZXhwb3J0IGludGVyZmFjZSBBcGlSZXNwb25zZTxUID0gYW55PiB7XHJcbiAgc3VjY2VzczogYm9vbGVhbjtcclxuICBkYXRhPzogVDtcclxuICBlcnJvcj86IHN0cmluZztcclxuICBtZXNzYWdlPzogc3RyaW5nO1xyXG59XHJcblxyXG4vLyDop4bpopHop6PmnpBBUEnlk43lupTnsbvlnotcclxuZXhwb3J0IGludGVyZmFjZSBWaWRlb1BhcnNlUmVzcG9uc2Uge1xyXG4gIHN1Y2Nlc3M6IGJvb2xlYW47XHJcbiAgZGF0YTogUGFyc2VkVmlkZW9JbmZvO1xyXG4gIGVycm9yPzogc3RyaW5nO1xyXG59XHJcblxyXG4vLyBXZWJEQVbkuIrkvKDlk43lupTnsbvlnotcclxuZXhwb3J0IGludGVyZmFjZSBXZWJEQVZVcGxvYWRSZXNwb25zZSB7XHJcbiAgc3VjY2VzczogYm9vbGVhbjtcclxuICBmaWxlUGF0aD86IHN0cmluZztcclxuICBlcnJvcj86IHN0cmluZztcclxufVxyXG4iXSwibmFtZXMiOlsiVGFza1N0YXR1cyIsIk1lZGlhVHlwZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/types/index.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fproxy%2Fparser%2Froute&page=%2Fapi%2Fproxy%2Fparser%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproxy%2Fparser%2Froute.ts&appDir=D%3A%5CGitHub%5Cdyjxnext%5Cdyjx%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CGitHub%5Cdyjxnext%5Cdyjx&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();