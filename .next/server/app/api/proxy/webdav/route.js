/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/proxy/webdav/route";
exports.ids = ["app/api/proxy/webdav/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fproxy%2Fwebdav%2Froute&page=%2Fapi%2Fproxy%2Fwebdav%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproxy%2Fwebdav%2Froute.ts&appDir=D%3A%5CGitHub%5Cdyjxnext%5Cdyjx%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CGitHub%5Cdyjxnext%5Cdyjx&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fproxy%2Fwebdav%2Froute&page=%2Fapi%2Fproxy%2Fwebdav%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproxy%2Fwebdav%2Froute.ts&appDir=D%3A%5CGitHub%5Cdyjxnext%5Cdyjx%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CGitHub%5Cdyjxnext%5Cdyjx&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var D_GitHub_dyjxnext_dyjx_src_app_api_proxy_webdav_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/proxy/webdav/route.ts */ \"(rsc)/./src/app/api/proxy/webdav/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/proxy/webdav/route\",\n        pathname: \"/api/proxy/webdav\",\n        filename: \"route\",\n        bundlePath: \"app/api/proxy/webdav/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"D:\\\\GitHub\\\\dyjxnext\\\\dyjx\\\\src\\\\app\\\\api\\\\proxy\\\\webdav\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_GitHub_dyjxnext_dyjx_src_app_api_proxy_webdav_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/proxy/webdav/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fproxy%2Fwebdav%2Froute&page=%2Fapi%2Fproxy%2Fwebdav%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproxy%2Fwebdav%2Froute.ts&appDir=D%3A%5CGitHub%5Cdyjxnext%5Cdyjx%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CGitHub%5Cdyjxnext%5Cdyjx&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/proxy/webdav/route.ts":
/*!*******************************************!*\
  !*** ./src/app/api/proxy/webdav/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\n// 生成随机日期命名的文件名\nfunction generateRandomFileName(extension = 'jpg') {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const hours = String(now.getHours()).padStart(2, '0');\n    const minutes = String(now.getMinutes()).padStart(2, '0');\n    const seconds = String(now.getSeconds()).padStart(2, '0');\n    const milliseconds = String(now.getMilliseconds()).padStart(3, '0');\n    const randomNum = Math.floor(Math.random() * 10000).toString().padStart(4, '0');\n    return `${year}${month}${day}_${hours}${minutes}${seconds}_${milliseconds}${randomNum}.${extension}`;\n}\n// 构建WebDAV完整路径\nfunction buildWebDAVPath(webdavConfig, folderPath, fileName) {\n    const baseUploadUrl = webdavConfig.url.replace(/\\/$/, '');\n    // 构建完整的上传路径，包含basePath、folderPath和fileName\n    let fullPath = baseUploadUrl;\n    // 添加basePath（如果存在）\n    if (webdavConfig.basePath) {\n        const normalizedBasePath = webdavConfig.basePath.replace(/^\\/+|\\/+$/g, '');\n        if (normalizedBasePath) {\n            fullPath = `${fullPath}/${normalizedBasePath}`;\n        }\n    }\n    // 添加folderPath（如果存在）\n    if (folderPath) {\n        const normalizedFolderPath = folderPath.replace(/^\\/+|\\/+$/g, '');\n        if (normalizedFolderPath) {\n            fullPath = `${fullPath}/${normalizedFolderPath}`;\n        }\n    }\n    // 添加文件名\n    return `${fullPath}/${fileName}`;\n}\n// 创建WebDAV文件夹\nasync function createWebDAVFolder(folderPath, auth) {\n    try {\n        const headers = {\n            'Authorization': `Basic ${auth}`,\n            'Content-Type': 'application/xml'\n        };\n        // 使用MKCOL方法创建文件夹\n        const response = await fetch(folderPath, {\n            method: 'MKCOL',\n            headers\n        });\n        // 201表示创建成功，405表示文件夹已存在\n        return response.status === 201 || response.status === 405;\n    } catch (error) {\n        console.error('[WebDAV] 创建文件夹失败:', error);\n        return false;\n    }\n}\n// 上传单个图片文件\nasync function uploadImageFile(imageUrl, uploadPath, auth) {\n    try {\n        // 下载图片\n        const imageResponse = await fetch(imageUrl, {\n            headers: {\n                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n            }\n        });\n        if (!imageResponse.ok) {\n            console.error(`[WebDAV] 下载图片失败: ${imageResponse.status}`);\n            return false;\n        }\n        const imageBuffer = await imageResponse.arrayBuffer();\n        // 上传图片到WebDAV\n        const headers = {\n            'Authorization': `Basic ${auth}`,\n            'Content-Type': 'application/octet-stream',\n            'Content-Length': imageBuffer.byteLength.toString()\n        };\n        const uploadResponse = await fetch(uploadPath, {\n            method: 'PUT',\n            headers,\n            body: imageBuffer\n        });\n        if (!uploadResponse.ok) {\n            console.error(`[WebDAV] 上传图片失败: ${uploadResponse.status}`);\n            return false;\n        }\n        return true;\n    } catch (error) {\n        console.error('[WebDAV] 图片上传错误:', error);\n        // 对于网络错误，提供更具体的错误信息\n        if (error instanceof Error) {\n            if (error.message.toLowerCase().includes('fetch failed') || error.message.toLowerCase().includes('econnreset') || error.message.toLowerCase().includes('timeout')) {\n                console.error('[WebDAV] 网络连接问题导致图片上传失败');\n            }\n        }\n        return false;\n    }\n}\nasync function POST(request) {\n    try {\n        const { videoUrl, images, webdavConfig, fileName, folderPath = '' } = await request.json();\n        if (!videoUrl && (!images || images.length === 0) || !webdavConfig || !fileName) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: '缺少必要参数'\n            }, {\n                status: 400\n            });\n        }\n        console.log(`[WebDAV] 开始上传文件: ${fileName}`);\n        console.log(`[WebDAV] 服务器: ${webdavConfig.url}`);\n        // 处理图集上传 - 新的文件夹上传方式\n        if (images && images.length > 0) {\n            console.log(`[WebDAV] 图集上传，包含 ${images.length} 张图片`);\n            // 1. 创建图集文件夹 (使用解析后的标题作为文件夹名)\n            const albumFolderPath = buildWebDAVPath(webdavConfig, folderPath, fileName);\n            // 构建认证头\n            const auth = btoa(`${webdavConfig.username}:${webdavConfig.password}`);\n            // 创建文件夹\n            const folderCreated = await createWebDAVFolder(albumFolderPath, auth);\n            if (!folderCreated) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: '创建图集文件夹失败'\n                }, {\n                    status: 500\n                });\n            }\n            console.log(`[WebDAV] 图集文件夹创建成功: ${albumFolderPath}`);\n            // 2. 逐个上传图片文件\n            let successCount = 0;\n            for(let i = 0; i < images.length; i++){\n                const image = images[i];\n                const imageFileName = generateRandomFileName('jpg') // 使用随机日期命名\n                ;\n                const imageUploadPath = `${albumFolderPath}/${imageFileName}`;\n                console.log(`[WebDAV] 上传图片 ${i + 1}/${images.length}: ${imageUploadPath}`);\n                const uploadSuccess = await uploadImageFile(image.url, imageUploadPath, auth);\n                if (uploadSuccess) {\n                    successCount++;\n                } else {\n                    console.error(`[WebDAV] 图片上传失败: ${image.url}`);\n                }\n            }\n            console.log(`[WebDAV] 图集上传完成，成功上传 ${successCount}/${images.length} 张图片`);\n            // 3. 返回文件夹路径作为上传结果\n            const result = {\n                success: successCount > 0,\n                filePath: albumFolderPath\n            };\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result);\n        }\n        // 处理视频上传 (保持原有方式不变)\n        // 首先下载视频文件\n        const maxRetries = 5; // 最大重试次数\n        let lastError;\n        for(let attempt = 1; attempt <= maxRetries; attempt++){\n            try {\n                console.log(`[WebDAV] 视频下载尝试 ${attempt}/${maxRetries}`);\n                // 根据尝试次数选择不同的User-Agent\n                let userAgent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36';\n                if (attempt > 1) {\n                    // 第二次及以后的尝试使用移动版User-Agent\n                    userAgent = 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1';\n                }\n                const controller = new AbortController();\n                const timeoutId = setTimeout(()=>controller.abort(), 30000); // 30秒超时\n                // 构建更丰富的请求头\n                const headers = {\n                    'User-Agent': userAgent,\n                    'Accept': 'video/*,*/*;q=0.9',\n                    'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8',\n                    'Cache-Control': 'no-cache',\n                    'Pragma': 'no-cache'\n                };\n                // 如果不是第一次尝试，添加Referer头\n                if (attempt > 1) {\n                    try {\n                        headers['Referer'] = new URL(videoUrl).origin;\n                    } catch (e) {\n                    // URL解析失败，忽略Referer头\n                    }\n                }\n                const videoResponse = await fetch(videoUrl, {\n                    headers,\n                    signal: controller.signal\n                });\n                clearTimeout(timeoutId);\n                if (!videoResponse.ok) {\n                    const errorMessage = `下载视频失败: ${videoResponse.status} ${videoResponse.statusText}`;\n                    console.error(`[WebDAV] ${errorMessage}`);\n                    // 对于权限错误(403/401)、服务器错误(5xx)和临时错误(408, 429)，进行重试\n                    const shouldRetry = (videoResponse.status === 403 || videoResponse.status === 401 || videoResponse.status === 408 || videoResponse.status === 429 || videoResponse.status >= 500) && attempt < maxRetries;\n                    if (shouldRetry) {\n                        // 使用指数退避策略等待后重试\n                        const waitTime = Math.min(1000 * Math.pow(2, attempt - 1), 10000); // 最大等待10秒\n                        console.log(`[WebDAV] 等待 ${waitTime / 1000} 秒后重试...`);\n                        await new Promise((resolve)=>setTimeout(resolve, waitTime));\n                        continue; // 继续下一次尝试\n                    }\n                    // 对于403错误提供更具体的错误信息\n                    let finalErrorMessage = errorMessage;\n                    if (videoResponse.status === 403) {\n                        finalErrorMessage += '。可能是视频链接已过期或需要登录，请尝试其他视频链接。';\n                    } else if (videoResponse.status === 401) {\n                        finalErrorMessage += '。认证失败，请检查视频链接是否正确。';\n                    }\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: false,\n                        error: finalErrorMessage\n                    }, {\n                        status: videoResponse.status\n                    });\n                }\n                const videoBuffer = await videoResponse.arrayBuffer();\n                console.log(`[WebDAV] 视频文件大小: ${videoBuffer.byteLength} bytes`);\n                // 构建WebDAV上传路径\n                const uploadPath = buildWebDAVPath(webdavConfig, folderPath, fileName);\n                // 构建认证头\n                const auth = btoa(`${webdavConfig.username}:${webdavConfig.password}`);\n                const uploadHeaders = {\n                    'Authorization': `Basic ${auth}`,\n                    'Content-Type': 'application/octet-stream',\n                    'Content-Length': videoBuffer.byteLength.toString()\n                };\n                // 上传到WebDAV服务器\n                const uploadResponse = await fetch(uploadPath, {\n                    method: 'PUT',\n                    headers: uploadHeaders,\n                    body: videoBuffer\n                });\n                if (!uploadResponse.ok) {\n                    console.error(`[WebDAV] 上传失败: ${uploadResponse.status} ${uploadResponse.statusText}`);\n                    console.error(`[WebDAV] 上传路径: ${uploadPath}`);\n                    // 尝试获取错误详情\n                    let errorMessage = `上传失败: ${uploadResponse.status}`;\n                    try {\n                        const errorText = await uploadResponse.text();\n                        if (errorText) {\n                            errorMessage += ` - ${errorText}`;\n                        }\n                    } catch (e) {\n                    // 忽略错误详情获取失败\n                    }\n                    // 对于404错误，提供更具体的错误信息\n                    if (uploadResponse.status === 404) {\n                        errorMessage = `上传路径不存在 (404): ${uploadPath}. 请检查WebDAV服务器地址和路径配置是否正确。`;\n                    }\n                    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                        success: false,\n                        error: errorMessage\n                    }, {\n                        status: uploadResponse.status\n                    });\n                }\n                console.log(`[WebDAV] 上传成功: ${uploadPath}`);\n                const result = {\n                    success: true,\n                    filePath: uploadPath\n                };\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result);\n            } catch (downloadError) {\n                lastError = downloadError;\n                console.error(`[WebDAV] 视频下载或上传错误 (尝试 ${attempt}/${maxRetries}):`, downloadError);\n                // 对于网络错误，在达到最大重试次数前进行重试\n                const isNetworkError = downloadError instanceof Error && (downloadError.message.toLowerCase().includes('network error') || downloadError.message.toLowerCase().includes('fetch failed') || downloadError.message.toLowerCase().includes('econnreset') || downloadError.message.toLowerCase().includes('timeout') || downloadError.message.toLowerCase().includes('econnrefused') || downloadError.message.toLowerCase().includes('etimedout'));\n                if (isNetworkError && attempt < maxRetries) {\n                    // 使用指数退避策略等待后重试\n                    const waitTime = Math.min(1000 * Math.pow(2, attempt - 1), 10000); // 最大等待10秒\n                    console.log(`[WebDAV] 网络错误，等待 ${waitTime / 1000} 秒后重试...`);\n                    await new Promise((resolve)=>setTimeout(resolve, waitTime));\n                    continue; // 继续下一次尝试\n                }\n                // 对于403错误，在第一次尝试时进行重试\n                const isAuthError = downloadError instanceof Error && (downloadError.message.includes('403') || downloadError.message.includes('401'));\n                if (isAuthError && attempt === 1) {\n                    console.log(`[WebDAV] 权限错误，等待1秒后重试...`);\n                    await new Promise((resolve)=>setTimeout(resolve, 1000));\n                    continue; // 重试一次\n                }\n                // 如果是最后一次尝试，跳出循环\n                if (attempt >= maxRetries) {\n                    break;\n                }\n            }\n        }\n        // 所有尝试都失败\n        console.error('[WebDAV] 所有下载尝试均失败');\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: lastError instanceof Error ? lastError.message : '下载或上传视频文件时发生错误'\n        }, {\n            status: 500\n        });\n    } catch (error) {\n        console.error('[WebDAV] 上传错误:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : '上传过程中发生未知错误'\n        }, {\n            status: 500\n        });\n    }\n}\n// 测试WebDAV连接\nasync function GET(request) {\n    try {\n        const searchParams = request.nextUrl.searchParams;\n        const serverUrl = searchParams.get('serverUrl');\n        const username = searchParams.get('username');\n        const password = searchParams.get('password');\n        if (!serverUrl || !username || !password) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: '缺少WebDAV连接参数'\n            }, {\n                status: 400\n            });\n        }\n        // 解码可能被编码的参数\n        const decodedUrl = decodeURIComponent(serverUrl);\n        const decodedUsername = decodeURIComponent(username);\n        const decodedPassword = decodeURIComponent(password);\n        console.log(`[WebDAV] 测试连接到: ${decodedUrl}`);\n        // 测试WebDAV连接\n        const auth = Buffer.from(`${decodedUsername}:${decodedPassword}`).toString('base64');\n        const testResponse = await fetch(decodedUrl, {\n            method: 'PROPFIND',\n            headers: {\n                'Authorization': `Basic ${auth}`,\n                'Depth': '0',\n                'Content-Type': 'application/xml'\n            },\n            body: `<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n        <D:propfind xmlns:D=\"DAV:\">\n          <D:prop>\n            <D:resourcetype/>\n          </D:prop>\n        </D:propfind>`\n        });\n        if (testResponse.ok || testResponse.status === 207) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                message: 'WebDAV连接测试成功'\n            });\n        } else {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: `WebDAV连接失败: ${testResponse.status}`\n            }, {\n                status: testResponse.status\n            });\n        }\n    } catch (error) {\n        console.error('[WebDAV] 连接测试错误:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : 'WebDAV连接测试失败'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/proxy/webdav/route.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fproxy%2Fwebdav%2Froute&page=%2Fapi%2Fproxy%2Fwebdav%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fproxy%2Fwebdav%2Froute.ts&appDir=D%3A%5CGitHub%5Cdyjxnext%5Cdyjx%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CGitHub%5Cdyjxnext%5Cdyjx&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();